/**
 * KeywordsTab - –í–∫–ª–∞–¥–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 * –§–∞–π–ª: /classes/Keywords/KeywordsTab.js
 * –¢—Ä–µ–±—É–µ—Ç: Utils, API, ExportManager
 */

class KeywordsTab {
    constructor() {
        this.containerId = 'keywordsContent';
        this.data = [];
        this.filteredData = [];
        this.isLoaded = false;
        this.sortColumn = null;
        this.sortDirection = 'asc';
        this.searchQuery = '';
        this.eventHandlers = {};
        
        this.setupSearchDebounce();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–±–∞—É–Ω—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    setupSearchDebounce() {
        this.debouncedSearch = Utils.debounce((query) => {
            this.filterData(query);
        }, 300);
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
     * @param {string} event
     * @param {Function} handler
     */
    on(event, handler) {
        if (!this.eventHandlers[event]) {
            this.eventHandlers[event] = [];
        }
        this.eventHandlers[event].push(handler);
    }

    /**
     * –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     * @param {string} event
     * @param {*} data
     */
    emit(event, data) {
        if (this.eventHandlers[event]) {
            this.eventHandlers[event].forEach(handler => handler(data));
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏
     * @param {Array} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    render(data = null) {
        const container = document.getElementById(this.containerId);
        if (!container) {
            console.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${this.containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        if (data) {
            this.data = data;
            this.filteredData = [...data];
            this.isLoaded = true;
        }

        if (!this.isLoaded) {
            container.innerHTML = this.generateLoadingHTML();
            return;
        }

        container.innerHTML = this.generateHTML();
        this.attachEventListeners();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     * @returns {string}
     */
    generateLoadingHTML() {
        return `
            <div class="loading">
                <div class="loading-spinner"></div>
                <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...</p>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
     * @returns {string}
     */
    generateHTML() {
        if (!this.data.length) {
            return `
                <div class="empty-state">
                    <div class="empty-icon">üîë</div>
                    <h3>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö</h3>
                    <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–º–µ–Ω–∞</p>
                </div>
            `;
        }

        const controls = this.generateControls();
        const table = this.generateTable();
        const pagination = this.generatePagination();

        return `
            <div class="keywords-content">
                ${controls}
                ${table}
                ${pagination}
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     * @returns {string}
     */
    generateControls() {
        return `
            <div class="table-controls">
                <div class="search-container">
                    <input type="text" 
                           id="keywordsSearch" 
                           class="search-input" 
                           placeholder="–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º..."
                           value="${typeof Utils !== 'undefined' ? Utils.escapeHtml(this.searchQuery) : this.searchQuery}">
                    <button class="search-clear" id="clearSearch" title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫">√ó</button>
                </div>
                
                <div class="controls-right">
                    <div class="results-info">
                        <span id="resultsCount">${this.filteredData.length}</span> –∏–∑ <span id="totalCount">${this.data.length}</span>
                    </div>
                    
                    <button class="export-btn" id="exportKeywordsBtn">
                        <span class="btn-icon">üì•</span>
                        –≠–∫—Å–ø–æ—Ä—Ç CSV
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
     * @returns {string}
     */
    generateTable() {
        if (!this.filteredData.length) {
            return `
                <div class="no-results">
                    <p>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                </div>
            `;
        }

        return `
            <div class="table-container">
                <table class="keywords-table">
                    <thead>
                        <tr>
                            <th class="sortable" data-column="word">
                                –ó–∞–ø—Ä–æ—Å
                                <span class="sort-indicator" data-column="word"></span>
                            </th>
                            <th class="sortable" data-column="ws">
                                –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å
                                <span class="sort-indicator" data-column="ws"></span>
                            </th>
                            <th class="sortable" data-column="wsk">
                                [!–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å]
                                <span class="sort-indicator" data-column="wsk"></span>
                            </th>
                            <th class="sortable" data-column="pos">
                                –ü–æ–∑–∏—Ü–∏—è
                                <span class="sort-indicator" data-column="pos"></span>
                            </th>
                            <th class="sortable" data-column="url">
                                URL
                                <span class="sort-indicator" data-column="url"></span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        ${this.filteredData.map(keyword => this.generateTableRow(keyword)).join('')}
                    </tbody>
                </table>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
     * @param {Object} keyword
     * @returns {string}
     */
    generateTableRow(keyword) {
        return `
            <tr>
                <td class="keyword-cell">
                    <span class="keyword" title="${typeof Utils !== 'undefined' ? Utils.escapeHtml(keyword.word) : keyword.word}">
                        ${typeof Utils !== 'undefined' ? Utils.escapeHtml(keyword.word) : keyword.word}
                    </span>
                </td>
                <td class="metric-cell">
                    <span class="metric">${typeof Utils !== 'undefined' ? Utils.formatNumber(keyword.ws || 0) : (keyword.ws || 0).toLocaleString()}</span>
                </td>
                <td class="metric-cell">
                    <span class="metric">${typeof Utils !== 'undefined' ? Utils.formatNumber(keyword.wsk || 0) : (keyword.wsk || 0).toLocaleString()}</span>
                </td>
                <td class="position-cell">
                    <span class="pos-badge ${typeof Utils !== 'undefined' ? Utils.getPositionBadgeClass(keyword.pos) : this.getPositionBadgeClass(keyword.pos)}">
                        ${keyword.pos || '-'}
                    </span>
                </td>
                <td class="url-cell">
                    <span class="url" title="${typeof Utils !== 'undefined' ? Utils.escapeHtml(keyword.url || '') : keyword.url || ''}">
                        ${this.truncateUrl(keyword.url)}
                    </span>
                </td>
            </tr>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     * @returns {string}
     */
    generatePagination() {
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        return '';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ
     * @param {number} position
     * @returns {string}
     */
    getPositionBadgeClass(position) {
        if (typeof position !== 'number') return 'pos-top50';
        if (position <= 3) return 'pos-top3';
        if (position <= 10) return 'pos-top10';
        return 'pos-top50';
    }

    /**
     * –û–±—Ä–µ–∑–∫–∞ URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string} url
     * @param {number} maxLength
     * @returns {string}
     */
    truncateUrl(url, maxLength = 60) {
        if (!url) return '-';
        
        if (url.length <= maxLength) {
            return typeof Utils !== 'undefined' ? Utils.escapeHtml(url) : url;
        }
        
        const truncated = url.substring(0, maxLength - 3) + '...';
        return typeof Utils !== 'undefined' ? Utils.escapeHtml(truncated) : truncated;
    }

    /**
     * –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('keywordsSearch');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.searchQuery = e.target.value;
                this.debouncedSearch(this.searchQuery);
            });
        }

        // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
        const clearBtn = document.getElementById('clearSearch');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                this.searchQuery = '';
                searchInput.value = '';
                this.filterData('');
            });
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        const sortableHeaders = document.querySelectorAll('.sortable');
        sortableHeaders.forEach(header => {
            header.addEventListener('click', (e) => {
                const column = e.currentTarget.dataset.column;
                this.sort(column);
            });
        });

        // –≠–∫—Å–ø–æ—Ä—Ç
        const exportBtn = document.getElementById('exportKeywordsBtn');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => {
                this.exportToCSV();
            });
        }

        // –ö–ª–∏–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        const keywordCells = document.querySelectorAll('.keyword-cell');
        keywordCells.forEach(cell => {
            cell.addEventListener('click', (e) => {
                const keyword = e.target.textContent.trim();
                this.handleKeywordClick(keyword);
            });
        });
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
     * @param {string} query
     */
    filterData(query) {
        if (!query.trim()) {
            this.filteredData = [...this.data];
        } else {
            const lowerQuery = query.toLowerCase();
            this.filteredData = this.data.filter(keyword => 
                keyword.word.toLowerCase().includes(lowerQuery) ||
                (keyword.url && keyword.url.toLowerCase().includes(lowerQuery))
            );
        }

        this.updateResultsCount();
        this.render();
    }

    /**
     * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     * @param {string} column
     */
    sort(column) {
        if (this.sortColumn === column) {
            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            this.sortColumn = column;
            this.sortDirection = 'asc';
        }

        this.filteredData = typeof Utils !== 'undefined' ? Utils.sortBy(this.filteredData, column, this.sortDirection) : this.sortBy(this.filteredData, column, this.sortDirection);
        this.updateSortIndicators();
        this.render();
    }

    /**
     * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫–ª—é—á—É
     * @param {Array} array
     * @param {string} key
     * @param {string} direction
     * @returns {Array}
     */
    sortBy(array, key, direction = 'asc') {
        return [...array].sort((a, b) => {
            const aVal = a[key];
            const bVal = b[key];
            
            if (aVal < bVal) return direction === 'asc' ? -1 : 1;
            if (aVal > bVal) return direction === 'asc' ? 1 : -1;
            return 0;
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     */
    updateSortIndicators() {
        const indicators = document.querySelectorAll('.sort-indicator');
        indicators.forEach(indicator => {
            const column = indicator.dataset.column;
            if (column === this.sortColumn) {
                indicator.textContent = this.sortDirection === 'asc' ? '‚Üë' : '‚Üì';
                indicator.style.opacity = '1';
            } else {
                indicator.textContent = '‚Üï';
                indicator.style.opacity = '0.3';
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    updateResultsCount() {
        const resultsCount = document.getElementById('resultsCount');
        const totalCount = document.getElementById('totalCount');
        
        if (resultsCount) resultsCount.textContent = this.filteredData.length;
        if (totalCount) totalCount.textContent = this.data.length;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
     * @param {string} keyword
     */
    handleKeywordClick(keyword) {
        this.emit('keywordClick', keyword);
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
     */
    exportToCSV() {
        if (!this.filteredData.length) {
            this.emit('notification', { type: 'error', message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞' });
            return;
        }

        const headers = ['–ó–∞–ø—Ä–æ—Å', '–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å', '[!–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å]', '–ü–æ–∑–∏—Ü–∏—è', 'URL'];
        const filename = `keywords_${new Date().toISOString().split('T')[0]}.csv`;
        
        if (typeof Utils !== 'undefined') {
            Utils.downloadCSV(this.filteredData, filename, headers);
        } else {
            this.downloadCSV(this.filteredData, filename, headers);
        }
        
        this.emit('notification', { 
            type: 'success', 
            message: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${this.filteredData.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤` 
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {Array} data
     */
    updateData(data) {
        this.data = data;
        this.filteredData = [...data];
        this.isLoaded = true;
        this.searchQuery = '';
        this.sortColumn = null;
        this.sortDirection = 'asc';
        this.render();
    }

    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    reset() {
        this.data = [];
        this.filteredData = [];
        this.isLoaded = false;
        this.searchQuery = '';
        this.sortColumn = null;
        this.sortDirection = 'asc';
        this.render();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     * @returns {Array}
     */
    getData() {
        return this.data;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     * @returns {Array}
     */
    getFilteredData() {
        return this.filteredData;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
     * @returns {boolean}
     */
    isDataLoaded() {
        return this.isLoaded;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @returns {Object}
     */
    getStats() {
        if (!this.data.length) {
            return {
                total: 0,
                filtered: 0,
                top10: 0,
                top50: 0,
                avgPosition: 0,
                avgFrequency: 0
            };
        }

        const top10 = this.data.filter(k => k.pos && k.pos <= 10).length;
        const top50 = this.data.filter(k => k.pos && k.pos <= 50).length;
        const avgPosition = this.data.reduce((sum, k) => sum + (k.pos || 0), 0) / this.data.length;
        const avgFrequency = this.data.reduce((sum, k) => sum + (k.ws || 0), 0) / this.data.length;

        return {
            total: this.data.length,
            filtered: this.filteredData.length,
            top10,
            top50,
            avgPosition: Math.round(avgPosition * 100) / 100,
            avgFrequency: Math.round(avgFrequency * 100) / 100
        };
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
     * @param {Array} data
     * @param {string} filename
     * @param {Array} headers
     */
    downloadCSV(data, filename, headers = null) {
        if (!Array.isArray(data) || data.length === 0) {
            console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV');
            return;
        }

        let csv = '';
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        if (headers) {
            csv += headers.map(h => `"${h}"`).join(',') + '\n';
        } else {
            const firstRow = data[0];
            csv += Object.keys(firstRow).map(key => `"${key}"`).join(',') + '\n';
        }

        // –î–∞–Ω–Ω—ã–µ
        data.forEach(row => {
            const values = headers ? 
                headers.map(h => row[h] || '') : 
                Object.values(row);
            
            csv += values.map(value => {
                const str = String(value || '');
                return `"${str.replace(/"/g, '""')}"`;
            }).join(',') + '\n';
        });

        // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
        const content = '\uFEFF' + csv;
        const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.data = [];
        this.filteredData = [];
        this.isLoaded = false;
        this.searchQuery = '';
        this.sortColumn = null;
        this.sortDirection = 'asc';
        this.eventHandlers = {};
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = KeywordsTab;
}

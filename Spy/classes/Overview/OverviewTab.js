/**
 * OverviewTab - –í–∫–ª–∞–¥–∫–∞ –æ–±–∑–æ—Ä–∞
 * –§–∞–π–ª: /classes/Overview/OverviewTab.js
 * –¢—Ä–µ–±—É–µ—Ç: Utils, API
 */

class OverviewTab {
    constructor() {
        this.containerId = 'overviewContent';
        this.data = null;
        this.isLoaded = false;
        this.eventHandlers = {};
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
     * @param {string} event
     * @param {Function} handler
     */
    on(event, handler) {
        if (!this.eventHandlers[event]) {
            this.eventHandlers[event] = [];
        }
        this.eventHandlers[event].push(handler);
    }

    /**
     * –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     * @param {string} event
     * @param {*} data
     */
    emit(event, data) {
        if (this.eventHandlers[event]) {
            this.eventHandlers[event].forEach(handler => handler(data));
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    render(data = null) {
        const container = document.getElementById(this.containerId);
        if (!container) {
            console.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${this.containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        if (data) {
            this.data = data;
            this.isLoaded = true;
        }

        if (!this.data) {
            container.innerHTML = this.generateLoadingHTML();
            return;
        }

        container.innerHTML = this.generateHTML();
        this.attachEventListeners();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     * @returns {string}
     */
    generateLoadingHTML() {
        return `
            <div class="loading">
                <div class="loading-spinner"></div>
                <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
     * @returns {string}
     */
    generateHTML() {
        if (!this.data) {
            return '<div class="error">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
        }

        const stats = this.generateStatsCards();
        const topKeywords = this.generateTopKeywords();
        const loadAllButton = this.generateLoadAllButton();

        return `
            <div class="overview-content">
                ${stats}
                ${topKeywords}
                ${loadAllButton}
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @returns {string}
     */
    generateStatsCards() {
        const stats = [
            {
                title: '–ü–æ–∑–∏—Ü–∏–π –≤ —Ç–æ–ø-10',
                value: this.data.it10 || 0,
                icon: 'üèÜ',
                color: 'success'
            },
            {
                title: '–ü–æ–∑–∏—Ü–∏–π –≤ —Ç–æ–ø-50',
                value: this.data.it50 || 0,
                icon: 'üìä',
                color: 'info'
            },
            {
                title: '–í–∏–¥–∏–º–æ—Å—Ç—å',
                value: this.data.vis || 0,
                icon: 'üëÅÔ∏è',
                color: 'primary'
            },
            {
                title: '–û–±—ä—è–≤–ª–µ–Ω–∏–π',
                value: this.data.adscnt || 0,
                icon: 'üí∞',
                color: 'warning'
            },
            {
                title: '–†–µ–∫–ª–∞–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
                value: this.data.adkeyscnt || 0,
                icon: 'üîë',
                color: 'secondary'
            },
            {
                title: '–ë—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É',
                value: this.data.adcost || 0,
                icon: 'üí∏',
                color: 'danger',
                suffix: ' ‚ÇΩ'
            }
        ];

        return `
            <div class="stats-grid">
                ${stats.map(stat => `
                    <div class="stat-card stat-card-${stat.color}">
                        <div class="stat-icon">${stat.icon}</div>
                        <div class="stat-content">
                            <h3 class="stat-value">${typeof Utils !== 'undefined' ? Utils.formatNumber(stat.value) : stat.value.toLocaleString()}${stat.suffix || ''}</h3>
                            <p class="stat-title">${stat.title}</p>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ø –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
     * @returns {string}
     */
    generateTopKeywords() {
        const keywords = (this.data.keys || []).slice(0, 10);
        
        if (!keywords.length) {
            return `
                <div class="section">
                    <h2>üîë –¢–æ–ø –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h2>
                    <div class="empty-state">
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö</p>
                    </div>
                </div>
            `;
        }

        return `
            <div class="section">
                <h2>üîë –¢–æ–ø –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h2>
                <div class="table-container">
                    <table class="keywords-table">
                        <thead>
                            <tr>
                                <th>–ó–∞–ø—Ä–æ—Å</th>
                                <th>–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å</th>
                                <th>–ü–æ–∑–∏—Ü–∏—è</th>
                                <th>URL</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${keywords.map(keyword => `
                                <tr>
                                    <td class="keyword-cell">
                                        <span class="keyword">${typeof Utils !== 'undefined' ? Utils.escapeHtml(keyword.word) : keyword.word}</span>
                                    </td>
                                    <td class="metric-cell">
                                        <span class="metric">${typeof Utils !== 'undefined' ? Utils.formatNumber(keyword.ws || 0) : (keyword.ws || 0).toLocaleString()}</span>
                                    </td>
                                    <td class="position-cell">
                                        <span class="pos-badge ${typeof Utils !== 'undefined' ? Utils.getPositionBadgeClass(keyword.pos) : this.getPositionBadgeClass(keyword.pos)}">
                                            ${keyword.pos || '-'}
                                        </span>
                                    </td>
                                    <td class="url-cell">
                                        <span class="url" title="${typeof Utils !== 'undefined' ? Utils.escapeHtml(keyword.url || '') : keyword.url || ''}">
                                            ${this.truncateUrl(keyword.url)}
                                        </span>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     * @returns {string}
     */
    generateLoadAllButton() {
        return `
            <div class="section">
                <div class="load-all-container">
                    <button class="load-all-btn" id="loadAllDataBtn">
                        <span class="btn-icon">üî•</span>
                        <span class="btn-text">–ó–∞–≥—Ä—É–∑–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ</span>
                        <span class="btn-description">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ä–µ–∫–ª–∞–º–∞, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã</span>
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ
     * @param {number} position
     * @returns {string}
     */
    getPositionBadgeClass(position) {
        if (typeof position !== 'number') return 'pos-top50';
        if (position <= 3) return 'pos-top3';
        if (position <= 10) return 'pos-top10';
        return 'pos-top50';
    }

    /**
     * –û–±—Ä–µ–∑–∫–∞ URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string} url
     * @param {number} maxLength
     * @returns {string}
     */
    truncateUrl(url, maxLength = 50) {
        if (!url) return '-';
        
        if (url.length <= maxLength) {
            return typeof Utils !== 'undefined' ? Utils.escapeHtml(url) : url;
        }
        
        const truncated = url.substring(0, maxLength - 3) + '...';
        return typeof Utils !== 'undefined' ? Utils.escapeHtml(truncated) : truncated;
    }

    /**
     * –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        const loadAllBtn = document.getElementById('loadAllDataBtn');
        if (loadAllBtn) {
            loadAllBtn.addEventListener('click', () => {
                this.handleLoadAllData();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        const keywordCells = document.querySelectorAll('.keyword-cell');
        keywordCells.forEach(cell => {
            cell.addEventListener('click', (e) => {
                const keyword = e.target.textContent.trim();
                this.handleKeywordClick(keyword);
            });
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    handleLoadAllData() {
        const btn = document.getElementById('loadAllDataBtn');
        if (btn) {
            btn.disabled = true;
            btn.innerHTML = `
                <span class="btn-icon">‚è≥</span>
                <span class="btn-text">–ó–∞–≥—Ä—É–∂–∞–µ–º...</span>
            `;
        }

        this.emit('loadAllData');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
     * @param {string} keyword
     */
    handleKeywordClick(keyword) {
        this.emit('keywordClick', keyword);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {Object} data
     */
    updateData(data) {
        this.data = data;
        this.isLoaded = true;
        this.render();
    }

    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    reset() {
        this.data = null;
        this.isLoaded = false;
        this.render();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     * @returns {Object|null}
     */
    getData() {
        return this.data;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
     * @returns {boolean}
     */
    isDataLoaded() {
        return this.isLoaded;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @returns {Object}
     */
    getStats() {
        if (!this.data) {
            return {
                top10: 0,
                top50: 0,
                visibility: 0,
                adsCount: 0,
                adKeysCount: 0,
                adCost: 0,
                keywordsCount: 0
            };
        }

        return {
            top10: this.data.it10 || 0,
            top50: this.data.it50 || 0,
            visibility: this.data.vis || 0,
            adsCount: this.data.adscnt || 0,
            adKeysCount: this.data.adkeyscnt || 0,
            adCost: this.data.adcost || 0,
            keywordsCount: (this.data.keys || []).length
        };
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
     * @param {string} filename
     */
    exportToCSV(filename = 'overview.csv') {
        if (!this.data) {
            console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }

        const keywords = this.data.keys || [];
        const headers = ['–ó–∞–ø—Ä–æ—Å', '–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å', '–ü–æ–∑–∏—Ü–∏—è', 'URL'];
        
        if (typeof Utils !== 'undefined') {
            Utils.downloadCSV(keywords, filename, headers);
        } else {
            this.downloadCSV(keywords, filename, headers);
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON
     * @param {string} filename
     */
    exportToJSON(filename = 'overview.json') {
        if (!this.data) {
            console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }

        if (typeof Utils !== 'undefined') {
            Utils.downloadJSON(this.data, filename);
        } else {
            this.downloadJSON(this.data, filename);
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
     * @param {Array} data
     * @param {string} filename
     * @param {Array} headers
     */
    downloadCSV(data, filename, headers = null) {
        if (!Array.isArray(data) || data.length === 0) {
            console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV');
            return;
        }

        let csv = '';
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        if (headers) {
            csv += headers.map(h => `"${h}"`).join(',') + '\n';
        } else {
            const firstRow = data[0];
            csv += Object.keys(firstRow).map(key => `"${key}"`).join(',') + '\n';
        }

        // –î–∞–Ω–Ω—ã–µ
        data.forEach(row => {
            const values = headers ? 
                headers.map(h => row[h] || '') : 
                Object.values(row);
            
            csv += values.map(value => {
                const str = String(value || '');
                return `"${str.replace(/"/g, '""')}"`;
            }).join(',') + '\n';
        });

        // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
        const content = '\uFEFF' + csv;
        const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
     * @param {Object} data
     * @param {string} filename
     */
    downloadJSON(data, filename) {
        const content = JSON.stringify(data, null, 2);
        const blob = new Blob([content], { type: 'application/json' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.data = null;
        this.isLoaded = false;
        this.eventHandlers = {};
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = OverviewTab;
}

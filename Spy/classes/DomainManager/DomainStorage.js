/**
 * DomainStorage - –†–∞–±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–æ–º–µ–Ω–æ–≤
 * –§–∞–π–ª: /classes/DomainManager/DomainStorage.js
 */

class DomainStorage {
    constructor(storageKey = 'keyso_saved_domains') {
        this.storageKey = storageKey;
        this.domains = [];
        this.tagColors = {};
        this.savedColors = [];
        this.loadFromStorage();
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
        this.loadFromJsonFiles().catch(error => {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', error);
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –∏–∑ localStorage
     * @returns {Array}
     */
    loadFromStorage() {
        try {
            const stored = localStorage.getItem(this.storageKey);
            if (stored) {
                this.domains = JSON.parse(stored);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–≥–æ–≤
            const storedTagColors = localStorage.getItem(this.storageKey + '_tagColors');
            if (storedTagColors) {
                this.tagColors = JSON.parse(storedTagColors);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
            const storedSavedColors = localStorage.getItem(this.storageKey + '_savedColors');
            if (storedSavedColors) {
                this.savedColors = JSON.parse(storedSavedColors);
            }
            
            return this.domains;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–µ–Ω–æ–≤ –∏–∑ storage:', error);
            this.domains = [];
            this.tagColors = {};
            this.savedColors = [];
        }
        return [];
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –≤ localStorage
     * @returns {boolean}
     */
    saveToStorage() {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–º–µ–Ω—ã
            localStorage.setItem(this.storageKey, JSON.stringify(this.domains));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–≥–æ–≤
            if (this.tagColors && Object.keys(this.tagColors).length > 0) {
                localStorage.setItem(this.storageKey + '_tagColors', JSON.stringify(this.tagColors));
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
            if (this.savedColors && this.savedColors.length > 0) {
                localStorage.setItem(this.storageKey + '_savedColors', JSON.stringify(this.savedColors));
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª—ã
            this.saveToJsonFiles();
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –≤ storage:', error);
            return false;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ API
     * @returns {Promise<boolean>}
     */
    async saveToJsonFiles() {
        try {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª—ã...');
            
            const response = await fetch('/data/domains_api.php?action=save_all', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    domains: this.domains,
                    tagColors: this.tagColors,
                    savedColors: this.savedColors
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª—ã');
                return true;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª—ã:', result.error);
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ JSON —Ñ–∞–π–ª—ã:', error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
     * @returns {Promise<boolean>}
     */
    async loadFromJsonFiles() {
        try {
            console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const hasLocalData = localStorage.getItem(this.storageKey) !== null;
            if (hasLocalData) {
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
                return true;
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API
            try {
                const response = await fetch('./data/domains_api.php?action=all');
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON –∫–æ–Ω—Ç–µ–Ω—Ç');
                }
                
                const result = await response.json();
                
                if (result.success) {
                    const data = result.data;
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–µ–Ω—ã
                    if (data.domains && Array.isArray(data.domains)) {
                        this.domains = data.domains;
                        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤ –∏–∑ JSON:', data.domains.length);
                    }
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–≥–æ–≤
                    if (data.tagColors && typeof data.tagColors === 'object') {
                        this.tagColors = data.tagColors;
                        console.log('üé® –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ü–≤–µ—Ç–æ–≤ —Ç–µ–≥–æ–≤ –∏–∑ JSON:', Object.keys(data.tagColors).length);
                    }
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
                    if (data.savedColors && Array.isArray(data.savedColors)) {
                        this.savedColors = data.savedColors;
                        console.log('üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∏–∑ JSON:', data.savedColors.length);
                    }
                    
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å localStorage
                    this.syncToLocalStorage();
                    
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ JSON —Ñ–∞–π–ª–æ–≤');
                    return true;
                } else {
                    console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', result.error);
                    return this.loadFromLocalStorageFallback();
                }
            } catch (fetchError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API, –ø—Ä–æ–±—É–µ–º localStorage:', fetchError.message);
                return this.loadFromLocalStorageFallback();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤:', error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage –∫–∞–∫ fallback
     * @returns {boolean}
     */
    loadFromLocalStorageFallback() {
        try {
            console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –∫–∞–∫ fallback...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ localStorage
            const hasLocalData = localStorage.getItem(this.storageKey) !== null;
            if (hasLocalData) {
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
                return true;
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–º–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
            return this.loadDefaultDomainsFallback();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ fallback
     * @returns {boolean}
     */
    async loadDefaultDomainsFallback() {
        try {
            const defaultResponse = await fetch('./data/default_domains.json');
            if (defaultResponse.ok) {
                const defaultDomains = await defaultResponse.json();
                if (Array.isArray(defaultDomains)) {
                    this.domains = defaultDomains;
                    this.syncToLocalStorage();
                    console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–æ–º–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultDomains.length);
                    return true;
                }
            }
        } catch (defaultError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–º–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultError.message);
        }
        
        return false;
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å localStorage
     */
    syncToLocalStorage() {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(this.domains));
            localStorage.setItem(this.storageKey + '_tagColors', JSON.stringify(this.tagColors));
            localStorage.setItem(this.storageKey + '_savedColors', JSON.stringify(this.savedColors));
            console.log('üîÑ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å localStorage');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å localStorage:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
     * @returns {Array}
     */
    getAllDomains() {
        return [...this.domains];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –ø–æ ID
     * @param {string} id
     * @returns {Object|null}
     */
    getDomainById(id) {
        return this.domains.find(domain => domain.id === id) || null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏
     * @param {string} domainName
     * @returns {Object|null}
     */
    getDomainByName(domainName) {
        return this.domains.find(domain => domain.domain === domainName) || null;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–º–µ–Ω–∞
     * @param {Object} domainData
     * @returns {Object}
     */
    addDomain(domainData) {
        const newDomain = {
            id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
            domain: domainData.domain,
            description: domainData.description || '',
            tags: domainData.tags || [],
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        this.domains.unshift(newDomain);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
        this.saveToStorage();

        return newDomain;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API
     * @returns {Promise<boolean>}
     */
    async saveToJsonFile() {
        try {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª...');
            
            const data = {
                domains: this.domains,
                tagColors: this.tagColors,
                savedColors: this.savedColors
            };
            
            const response = await fetch('./data/domains_api.php?action=save_all', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª');
                return true;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª:', result.error);
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª:', error);
            return false;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–º–µ–Ω–∞
     * @param {string} id
     * @param {Object} updates
     * @returns {Object|null}
     */
    updateDomain(id, updates) {
        const index = this.domains.findIndex(domain => domain.id === id);

        if (index === -1) {
            console.warn('–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', id);
            return null;
        }

        this.domains[index] = {
            ...this.domains[index],
            domain: updates.domain || this.domains[index].domain,
            description: updates.description !== undefined ? updates.description : this.domains[index].description,
            tags: updates.tags !== undefined ? updates.tags : this.domains[index].tags,
            updatedAt: new Date().toISOString()
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
        this.saveToStorage();
        
        return this.domains[index];
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
     * @param {string} id
     * @returns {boolean}
     */
    deleteDomain(id) {
        const initialLength = this.domains.length;
        this.domains = this.domains.filter(domain => domain.id !== id);

        if (this.domains.length < initialLength) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
            this.saveToStorage();
            
            return true;
        }

        return false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞
     * @param {string} domainName
     * @returns {boolean}
     */
    domainExists(domainName) {
        return this.domains.some(domain => domain.domain === domainName);
    }

    /**
     * –ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–æ–≤ –ø–æ —Ç–µ–≥—É
     * @param {string} tag
     * @returns {Array}
     */
    findDomainsByTag(tag) {
        return this.domains.filter(domain =>
            domain.tags && domain.tags.includes(tag)
        );
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤
     * @returns {Array}
     */
    getAllTags() {
        const tagsSet = new Set();
        this.domains.forEach(domain => {
            if (domain.tags) {
                domain.tags.forEach(tag => tagsSet.add(tag));
            }
        });
        return Array.from(tagsSet).sort();
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–æ–º–µ–Ω–æ–≤ –≤ JSON
     * @returns {string}
     */
    exportToJSON() {
        return JSON.stringify(this.domains, null, 2);
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –¥–æ–º–µ–Ω–æ–≤ –∏–∑ JSON
     * @param {string} jsonData
     * @param {boolean} merge - –µ—Å–ª–∏ true, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
     * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞
     */
    importFromJSON(jsonData, merge = true) {
        try {
            const importedDomains = JSON.parse(jsonData);

            if (!Array.isArray(importedDomains)) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –¥–æ–º–µ–Ω–æ–≤.');
            }

            let addedCount = 0;
            let skippedCount = 0;

            importedDomains.forEach(domain => {
                if (!this.domainExists(domain.domain)) {
                    const newDomain = {
                        ...domain,
                        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
                        updatedAt: new Date().toISOString()
                    };

                    if (merge) {
                        this.domains.push(newDomain);
                    } else {
                        this.domains = [newDomain];
                    }

                    addedCount++;
                } else {
                    skippedCount++;
                }
            });

            if (!merge && importedDomains.length > 0) {
                this.domains = importedDomains.map(domain => ({
                    ...domain,
                    id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
                    updatedAt: new Date().toISOString()
                }));
                addedCount = importedDomains.length;
                skippedCount = 0;
            }

            this.saveToStorage();

            return {
                success: true,
                addedCount,
                skippedCount,
                totalDomains: this.domains.length
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
     * @returns {boolean}
     */
    clearAll() {
        this.domains = [];
        return this.saveToStorage();
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤ —Å —Ç–µ–≥–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    addTestDomainsWithTags() {
        const testDomains = [
            {
                id: 'test-1',
                domain: 'dns-shop.ru',
                description: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
                tags: ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 'e-commerce', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã'],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'test-2',
                domain: 'ozon.ru',
                description: '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ç–æ–≤–∞—Ä–æ–≤',
                tags: ['–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', 'e-commerce', '–æ–Ω–ª–∞–π–Ω-—Ç–æ—Ä–≥–æ–≤–ª—è'],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'test-3',
                domain: 'wildberries.ru',
                description: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã –∏ —Ç–æ–≤–∞—Ä–æ–≤',
                tags: ['–æ–¥–µ–∂–¥–∞', 'e-commerce', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã'],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'test-4',
                domain: 'yandex.ru',
                description: '–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏ —Å–µ—Ä–≤–∏—Å—ã',
                tags: ['–ø–æ–∏—Å–∫', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'IT'],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'test-5',
                domain: 'mail.ru',
                description: '–ü–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∏ –ø–æ—Ä—Ç–∞–ª',
                tags: ['–ø–æ—á—Ç–∞', '–ø–æ—Ä—Ç–∞–ª', 'IT'],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        testDomains.forEach(testDomain => {
            if (!this.domains.find(d => d.id === testDomain.id)) {
                this.domains.push(testDomain);
            }
        });

        this.saveToStorage();
        console.log('–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã —Å —Ç–µ–≥–∞–º–∏:', testDomains.length);
        return testDomains.length;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @returns {Object}
     */
    getStatistics() {
        return {
            totalDomains: this.domains.length,
            totalTags: this.getAllTags().length,
            domainsWithDescription: this.domains.filter(d => d.description).length,
            domainsWithTags: this.domains.filter(d => d.tags && d.tags.length > 0).length
        };
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ —Ç–µ–≥–∞
     * @param {string} tag
     * @param {string} color
     */
    setTagColor(tag, color) {
        if (!this.tagColors) {
            this.tagColors = {};
        }
        this.tagColors[tag] = color;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
        this.saveToStorage();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–≥–∞
     * @param {string} tag
     * @returns {string}
     */
    getTagColor(tag) {
        return this.tagColors && this.tagColors[tag] ? this.tagColors[tag] : null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ —Ç–µ–≥–æ–≤
     * @returns {Object}
     */
    getTagColors() {
        return this.tagColors || {};
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ü–≤–µ—Ç–∞
     * @param {string} color
     */
    saveCustomColor(color) {
        if (!this.savedColors) {
            this.savedColors = [];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ü–≤–µ—Ç
        if (!this.savedColors.includes(color)) {
            this.savedColors.push(color);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
            this.saveToStorage();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
     * @returns {Array}
     */
    getSavedColors() {
        return this.savedColors || [];
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
     * @param {number} index
     */
    removeSavedColor(index) {
        if (this.savedColors && this.savedColors.length > index) {
            this.savedColors.splice(index, 1);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
            this.saveToStorage();
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
     */
    clearSavedColors() {
        this.savedColors = [];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
        this.saveToStorage();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DomainStorage;
}
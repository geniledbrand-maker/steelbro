<?php
/**
 * –°–ö–†–ò–ü–¢ –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í
 * –í–µ—Ä—Å–∏—è 1.0
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ selected_products
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ –û–î–ò–ù –†–ê–ó –ø–æ—Å–ª–µ fix_data.php
 */

header('Content-Type: text/html; charset=utf-8');

$dataFile = __DIR__ . '/dashboard_data.json';

echo "<!DOCTYPE html>
<html>
<head>
    <meta charset='UTF-8'>
    <title>–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            border-bottom: 3px solid #4CAF50;
            padding-bottom: 10px;
        }
        .success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }
        .error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }
        .info {
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            color: #0c5460;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }
        .warning {
            background: #fff3cd;
            border: 1px solid #ffeeba;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin: 20px 0;
        }
        .stat-box {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
        }
        .stat-number {
            font-size: 32px;
            font-weight: bold;
            color: #4CAF50;
        }
        .stat-label {
            color: #666;
            margin-top: 5px;
        }
        code {
            background: #f4f4f4;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
        ul {
            list-style: none;
            padding: 0;
        }
        li {
            padding: 5px 0;
            border-bottom: 1px solid #eee;
        }
        li:before {
            content: '‚úì ';
            color: #4CAF50;
            font-weight: bold;
        }
        .duplicate-item {
            background: #fff3cd;
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            border-left: 4px solid #ffc107;
        }
    </style>
</head>
<body>
    <div class='container'>
        <h1>üßπ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</h1>";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
if (!file_exists($dataFile)) {
    echo "<div class='error'>
            <strong>‚ùå –û—à–∏–±–∫–∞:</strong> –§–∞–π–ª <code>dashboard_data.json</code> –Ω–µ –Ω–∞–π–¥–µ–Ω!
          </div>";
    echo "</div></body></html>";
    exit;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
$data = json_decode(file_get_contents($dataFile), true);

if (!is_array($data)) {
    echo "<div class='error'>
            <strong>‚ùå –û—à–∏–±–∫–∞:</strong> –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON —Ñ–∞–π–ª!
          </div>";
    echo "</div></body></html>";
    exit;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã
foreach (['selected_products', 'custom_products', 'deleted_products'] as $key) {
    if (!isset($data[$key]) || !is_array($data[$key])) {
        $data[$key] = [];
    }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û
$countBefore = count($data['selected_products']);

echo "<h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –æ—á–∏—Å—Ç–∫–∏:</h2>
      <div class='stats'>
        <div class='stat-box'>
            <div class='stat-number'>$countBefore</div>
            <div class='stat-label'>–í—Å–µ–≥–æ –∏–∑–¥–µ–ª–∏–π (—Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏)</div>
        </div>
        <div class='stat-box'>
            <div class='stat-number'>" . count(array_unique($data['selected_products'])) . "</div>
            <div class='stat-label'>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π</div>
        </div>
      </div>";

// –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
$counts = array_count_values($data['selected_products']);
$duplicates = array_filter($counts, function($count) {
    return $count > 1;
});

if (count($duplicates) > 0) {
    echo "<div class='warning'>
            <strong>‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:</strong> " . count($duplicates) . "
          </div>";

    echo "<h3>üîç –°–ø–∏—Å–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:</h3>";
    foreach ($duplicates as $name => $count) {
        echo "<div class='duplicate-item'>
                <strong>" . htmlspecialchars($name) . "</strong> ‚Äî –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è <strong>$count</strong> —Ä–∞–∑(–∞)
              </div>";
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    echo "<h3>üßπ –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã...</h3>";

    $originalCount = count($data['selected_products']);
    $data['selected_products'] = array_values(array_unique($data['selected_products']));
    $newCount = count($data['selected_products']);
    $removed = $originalCount - $newCount;

    echo "<div class='info'>
            ‚úì –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: <strong>$removed</strong>
          </div>";

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    $data['last_updated'] = date('Y-m-d H:i:s');
    $result = file_put_contents($dataFile, json_encode($data, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));

    if ($result !== false) {
        echo "<div class='success'>
                <strong>‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</strong>
              </div>";

        echo "<h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏:</h2>
              <div class='stats'>
                <div class='stat-box'>
                    <div class='stat-number'>$newCount</div>
                    <div class='stat-label'>–í—Å–µ–≥–æ –∏–∑–¥–µ–ª–∏–π</div>
                </div>
                <div class='stat-box'>
                    <div class='stat-number'>$removed</div>
                    <div class='stat-label'>–£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</div>
                </div>
              </div>";
    } else {
        echo "<div class='error'>
                <strong>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª!</strong><br>
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.
              </div>";
    }

} else {
    echo "<div class='success'>
            <strong>‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!</strong><br>
            –í—Å–µ –∏–∑–¥–µ–ª–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã.
          </div>";
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ custom_products
echo "<h2>üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</h2>";

$customNames = array_map(function($p) { return $p['name']; }, $data['custom_products']);
$selectedNames = $data['selected_products'];

$missingInSelected = array_diff($customNames, $selectedNames);
$missingInCustom = array_diff($selectedNames, $customNames);

// –§–∏–ª—å—Ç—Ä—É–µ–º –∏–∑–¥–µ–ª–∏—è –∏–∑ products.json
$productsFile = __DIR__ . '/products.json';
$standardProducts = [];
if (file_exists($productsFile)) {
    $productsData = json_decode(file_get_contents($productsFile), true);
    if (isset($productsData['all_products'])) {
        $standardProducts = array_map(function($p) {
            return $p['name'];
        }, $productsData['all_products']);
    }
}

// –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
$missingInCustomFiltered = array_filter($missingInCustom, function($name) use ($standardProducts) {
    return !in_array($name, $standardProducts);
});

if (count($missingInSelected) > 0) {
    echo "<div class='warning'>
            ‚ö†Ô∏è –ò–∑–¥–µ–ª–∏—è –≤ custom_products, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ selected_products: <strong>" . count($missingInSelected) . "</strong>
          </div>";
}

if (count($missingInCustomFiltered) > 0) {
    echo "<div class='warning'>
            ‚ö†Ô∏è –ò–∑–¥–µ–ª–∏—è –≤ selected_products, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ custom_products (–Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ): <strong>" . count($missingInCustomFiltered) . "</strong>
          </div>";
}

if (count($missingInSelected) === 0 && count($missingInCustomFiltered) === 0) {
    echo "<div class='success'>‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã</div>";
}

echo "
        <h2>üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</h2>
        <div class='info'>
            <ol style='list-style: decimal; padding-left: 20px;'>
                <li><strong>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!</strong> –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+F5</li>
                <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –∏–∑–¥–µ–ª–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</li>
                <li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ</li>
                <li>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É - –∏–∑–¥–µ–ª–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è</li>
                <li><strong>–£–¥–∞–ª–∏—Ç–µ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</strong>
                    <ul style='margin-top: 10px;'>
                        <li>fix_data.php</li>
                        <li>fix_data_v2.php</li>
                        <li>remove_duplicates.php (—ç—Ç–æ—Ç —Ñ–∞–π–ª)</li>
                        <li>fix_permissions.sh</li>
                    </ul>
                </li>
            </ol>
        </div>
        
        <div class='success'>
            <strong>‚úÖ –ì–æ—Ç–æ–≤–æ!</strong><br>
            –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
        </div>
    </div>
</body>
</html>";
?>
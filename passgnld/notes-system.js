/* ==================== NOTES SYSTEM ==================== */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
let notesData = [];
let currentNoteId = null;
let isNotesLoaded = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–º–µ—Ç–æ–∫
function initNotesSystem() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–º–µ—Ç–æ–∫...');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    loadNotesFromServer();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Markdown toolbar
    initMarkdownToolbar();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    const newNoteBtn = document.querySelector('.notes-new-btn');
    if (newNoteBtn) {
        newNoteBtn.addEventListener('click', createNewNote);
    }

    const saveBtn = document.querySelector('.notes-save-btn');
    if (saveBtn) {
        saveBtn.addEventListener('click', saveCurrentNote);
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }

    const deleteBtn = document.querySelector('.notes-delete-btn');
    if (deleteBtn) {
        deleteBtn.addEventListener('click', deleteCurrentNote);
    }

    // –ü–æ–∏—Å–∫
    const searchInput = document.querySelector('.notes-search-input');
    if (searchInput) {
        searchInput.addEventListener('input', (e) => {
            filterNotes(e.target.value);
        });
    }

    // –¢–µ–≥–∏
    const addTagBtn = document.querySelector('.notes-add-tag-btn');
    if (addTagBtn) {
        addTagBtn.addEventListener('click', addTag);
    }

    const tagInput = document.querySelector('.notes-tags-input-group input');
    if (tagInput) {
        tagInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                addTag();
            }
        });
    }

    // Live preview
    const markdownEditor = document.querySelector('.notes-markdown-editor');
    if (markdownEditor) {
        markdownEditor.addEventListener('input', updateMarkdownPreview);
    }

    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

/* ==================== MARKDOWN TOOLBAR FUNCTIONS ==================== */

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Markdown –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function initMarkdownToolbar() {
    console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Markdown toolbar...');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    const buttons = document.querySelectorAll('.markdown-toolbar-btn');

    if (buttons.length === 0) {
        console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∏ toolbar –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    buttons.forEach(btn => {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const newBtn = btn.cloneNode(true);
        btn.parentNode.replaceChild(newBtn, btn);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        newBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const action = newBtn.dataset.action;
            if (action) {
                applyMarkdownFormat(action);
            }
        });
    });

    console.log(`‚úÖ Markdown toolbar –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (${buttons.length} –∫–Ω–æ–ø–æ–∫)`);
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function applyMarkdownFormat(action) {
    const editor = document.querySelector('.notes-markdown-editor');
    if (!editor) return;

    const start = editor.selectionStart;
    const end = editor.selectionEnd;
    const selectedText = editor.value.substring(start, end);
    const beforeText = editor.value.substring(0, start);
    const afterText = editor.value.substring(end);

    let newText = '';
    let cursorOffset = 0;

    switch (action) {
        case 'bold':
            newText = `**${selectedText || '–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç'}**`;
            cursorOffset = selectedText ? newText.length : 2;
            break;

        case 'italic':
            newText = `*${selectedText || '–∫—É—Ä—Å–∏–≤'}*`;
            cursorOffset = selectedText ? newText.length : 1;
            break;

        case 'strikethrough':
            newText = `~~${selectedText || '–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π'}~~`;
            cursorOffset = selectedText ? newText.length : 2;
            break;

        case 'heading1':
            newText = `# ${selectedText || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1'}`;
            cursorOffset = newText.length;
            break;

        case 'heading2':
            newText = `## ${selectedText || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2'}`;
            cursorOffset = newText.length;
            break;

        case 'heading3':
            newText = `### ${selectedText || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3'}`;
            cursorOffset = newText.length;
            break;

        case 'code-inline':
            newText = `\`${selectedText || '–∫–æ–¥'}\``;
            cursorOffset = selectedText ? newText.length : 1;
            break;

        case 'code-block':
            newText = `\`\`\`javascript\n${selectedText || '// –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å'}\n\`\`\``;
            cursorOffset = selectedText ? newText.length : 14;
            break;

        case 'quote':
            newText = `> ${selectedText || '–¶–∏—Ç–∞—Ç–∞'}`;
            cursorOffset = newText.length;
            break;

        case 'list-ul':
            if (selectedText) {
                const lines = selectedText.split('\n');
                newText = lines.map(line => `- ${line}`).join('\n');
                cursorOffset = newText.length;
            } else {
                newText = '- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞\n- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞\n- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞';
                cursorOffset = newText.length;
            }
            break;

        case 'list-ol':
            if (selectedText) {
                const lines = selectedText.split('\n');
                newText = lines.map((line, i) => `${i + 1}. ${line}`).join('\n');
                cursorOffset = newText.length;
            } else {
                newText = '1. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç\n2. –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç\n3. –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç';
                cursorOffset = newText.length;
            }
            break;

        case 'link':
            newText = `[${selectedText || '—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏'}](https://example.com)`;
            cursorOffset = selectedText ? newText.length - 21 : 1;
            break;

        case 'image':
            newText = `![${selectedText || '–æ–ø–∏—Å–∞–Ω–∏–µ'}](https://example.com/image.jpg)`;
            cursorOffset = selectedText ? newText.length - 33 : 2;
            break;

        case 'table':
            newText = `| –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1 | –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2 | –ó–∞–≥–æ–ª–æ–≤–æ–∫ 3 |\n|-------------|-------------|-------------|\n| –Ø—á–µ–π–∫–∞ 1    | –Ø—á–µ–π–∫–∞ 2    | –Ø—á–µ–π–∫–∞ 3    |\n| –Ø—á–µ–π–∫–∞ 4    | –Ø—á–µ–π–∫–∞ 5    | –Ø—á–µ–π–∫–∞ 6    |`;
            cursorOffset = newText.length;
            break;

        case 'hr':
            newText = '\n---\n';
            cursorOffset = newText.length;
            break;

        case 'task':
            newText = '- [ ] –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n- [x] –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞';
            cursorOffset = newText.length;
            break;

        default:
            return;
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    editor.value = beforeText + newText + afterText;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
    const newCursorPos = start + cursorOffset;
    editor.setSelectionRange(newCursorPos, newCursorPos);
    editor.focus();

    // –û–±–Ω–æ–≤–ª—è–µ–º preview
    updateMarkdownPreview();

    console.log(`‚úèÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${action}`);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadNotesFromServer() {
    try {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
        const response = await fetch('api.php?action=loadNotes');
        const data = await response.json();

        if (data.success) {
            notesData = data.notes || [];
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: ${notesData.length}`);
            console.log('üìÅ –§–∞–π–ª:', data.file);
            renderNotesList();
            isNotesLoaded = true;
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', data.error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–æ–∫: ' + data.error, 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function saveNotesToServer() {
    try {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', notesData);

        const response = await fetch('api.php?action=saveNotes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ notes: notesData })
        });

        const data = await response.json();

        if (data.success) {
            console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            console.log('üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', data.saved);
            console.log('üìÅ –§–∞–π–ª:', data.file);
            showNotification('–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ‚úì', 'success');
            return true;
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', data.error);
            showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + data.error, 'error');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        return false;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
function createNewNote() {
    const newNote = {
        id: Date.now(),
        title: '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
        content: '',
        tags: [],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };

    notesData.unshift(newNote);
    renderNotesList();
    openNote(newNote.id);

    // –§–æ–∫—É—Å –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    setTimeout(() => {
        const titleInput = document.querySelector('.notes-title-input');
        if (titleInput) {
            titleInput.select();
        }

        // –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º toolbar –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
        initMarkdownToolbar();
    }, 100);

    console.log('‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞:', newNote.id);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–º–µ—Ç–∫–∏
async function saveCurrentNote() {
    if (!currentNoteId) {
        showNotification('–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'warning');
        return;
    }

    const note = notesData.find(n => n.id === currentNoteId);
    if (!note) {
        showNotification('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const titleInput = document.querySelector('.notes-title-input');
    const contentInput = document.querySelector('.notes-markdown-editor');

    if (titleInput) {
        note.title = titleInput.value.trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    }

    if (contentInput) {
        note.content = contentInput.value;
    }

    note.updatedAt = new Date().toISOString();

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:', {
        id: note.id,
        title: note.title,
        contentLength: note.content.length,
        tags: note.tags
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const saved = await saveNotesToServer();

    if (saved) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        renderNotesList();

        // –í—ã–¥–µ–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
        highlightNote(currentNoteId);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async function deleteCurrentNote() {
    if (!currentNoteId) {
        showNotification('–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        return;
    }

    const note = notesData.find(n => n.id === currentNoteId);
    if (!note) return;

    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É "${note.title}"?`)) {
        notesData = notesData.filter(n => n.id !== currentNoteId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await saveNotesToServer();

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        renderNotesList();
        closeEditor();

        showNotification('–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        console.log('üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞:', currentNoteId);
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–µ—Ç–∫–∏
function openNote(noteId) {
    const note = notesData.find(n => n.id === noteId);
    if (!note) return;

    currentNoteId = noteId;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
    const editorContainer = document.querySelector('.notes-editor-container');
    const emptyEditor = document.querySelector('.notes-empty-editor');

    if (editorContainer) {
        editorContainer.classList.remove('hidden');
    }
    if (emptyEditor) {
        emptyEditor.classList.add('hidden');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const titleInput = document.querySelector('.notes-title-input');
    const contentInput = document.querySelector('.notes-markdown-editor');

    if (titleInput) {
        titleInput.value = note.title;
    }

    if (contentInput) {
        contentInput.value = note.content;
        updateMarkdownPreview();
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–≥–∏
    renderTags(note.tags);

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
    highlightNote(noteId);

    // –í–ê–ñ–ù–û: –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º toolbar –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!document.querySelector('.markdown-toolbar')?.hasChildNodes()) {
        setTimeout(() => initMarkdownToolbar(), 100);
    }

    console.log('üìñ –û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–º–µ—Ç–∫–∞:', note.title);
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
function highlightNote(noteId) {
    document.querySelectorAll('.note-item').forEach(item => {
        if (parseInt(item.dataset.noteId) === noteId) {
            item.classList.add('active');
        } else {
            item.classList.remove('active');
        }
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function closeEditor() {
    currentNoteId = null;

    const editorContainer = document.querySelector('.notes-editor-container');
    const emptyEditor = document.querySelector('.notes-empty-editor');

    if (editorContainer) {
        editorContainer.classList.add('hidden');
    }
    if (emptyEditor) {
        emptyEditor.classList.remove('hidden');
    }

    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    document.querySelectorAll('.note-item').forEach(item => {
        item.classList.remove('active');
    });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
function renderNotesList() {
    const notesList = document.querySelector('.notes-list');
    if (!notesList) return;

    if (notesData.length === 0) {
        notesList.innerHTML = `
            <div class="notes-empty-state">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                    <polyline points="14 2 14 8 20 8"></polyline>
                </svg>
                <p>–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                <small>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É</small>
            </div>
        `;
        return;
    }

    notesList.innerHTML = notesData.map(note => {
        const preview = note.content.substring(0, 100).replace(/[#*`\n]/g, ' ').trim();
        const date = new Date(note.updatedAt).toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });

        return `
            <div class="note-item ${note.id === currentNoteId ? 'active' : ''}" 
                 data-note-id="${note.id}"
                 onclick="openNote(${note.id})">
                <div class="note-item-title">${escapeHtml(note.title)}</div>
                <div class="note-item-preview">${escapeHtml(preview) || '(–ø—É—Å—Ç–æ)'}</div>
                <div class="note-item-meta">
                    <span>${date}</span>
                    <span>${note.content.length} —Å–∏–º.</span>
                </div>
                ${note.tags.length > 0 ? `
                    <div class="note-item-tags">
                        ${note.tags.map(tag => `
                            <span class="note-item-tag">${escapeHtml(tag)}</span>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
        `;
    }).join('');

    console.log('üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', notesData.length);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
function addTag() {
    if (!currentNoteId) return;

    const note = notesData.find(n => n.id === currentNoteId);
    if (!note) return;

    const tagInput = document.querySelector('.notes-tags-input-group input');
    if (!tagInput) return;

    const tagValue = tagInput.value.trim();
    if (!tagValue) return;

    if (note.tags.includes(tagValue)) {
        showNotification('–¢–∞–∫–æ–π —Ç–µ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'warning');
        return;
    }

    note.tags.push(tagValue);
    renderTags(note.tags);
    tagInput.value = '';

    console.log('üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–≥:', tagValue);
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
function removeTag(tag) {
    if (!currentNoteId) return;

    const note = notesData.find(n => n.id === currentNoteId);
    if (!note) return;

    note.tags = note.tags.filter(t => t !== tag);
    renderTags(note.tags);

    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ–≥:', tag);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–≥–æ–≤
function renderTags(tags) {
    const tagsList = document.querySelector('.notes-tags-list');
    if (!tagsList) return;

    if (tags.length === 0) {
        tagsList.innerHTML = '<span class="notes-tags-placeholder">–¢–µ–≥–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</span>';
        return;
    }

    tagsList.innerHTML = tags.map(tag => `
        <span class="note-tag">
            ${escapeHtml(tag)}
            <span class="note-tag-remove" onclick="removeTag('${escapeHtml(tag)}')">√ó</span>
        </span>
    `).join('');
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫
function filterNotes(searchQuery) {
    const query = searchQuery.toLowerCase().trim();

    document.querySelectorAll('.note-item').forEach(item => {
        const noteId = parseInt(item.dataset.noteId);
        const note = notesData.find(n => n.id === noteId);

        if (!note) return;

        const searchIn = [
            note.title,
            note.content,
            ...note.tags
        ].join(' ').toLowerCase();

        if (searchIn.includes(query)) {
            item.style.display = 'block';
        } else {
            item.style.display = 'none';
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ preview Markdown
function updateMarkdownPreview() {
    const editor = document.querySelector('.notes-markdown-editor');
    const preview = document.querySelector('.notes-preview-content');

    if (!editor || !preview) return;

    const content = editor.value;

    if (!content.trim()) {
        preview.innerHTML = '<div class="notes-preview-placeholder">–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å...</div>';
        return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º marked.js –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
    if (typeof marked !== 'undefined') {
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ marked
            marked.setOptions({
                breaks: true,
                gfm: true,
                sanitize: false
            });

            const html = marked.parse(content);
            preview.innerHTML = html;

            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å highlight.js
            if (typeof hljs !== 'undefined') {
                preview.querySelectorAll('pre code').forEach((block) => {
                    hljs.highlightElement(block);
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞ Markdown:', error);
            preview.innerHTML = '<div class="notes-preview-placeholder">–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞</div>';
        }
    } else {
        // Fallback –±–µ–∑ marked.js - –ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞
        const html = content
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\n/g, '<br>');
        preview.innerHTML = html;
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let container = document.querySelector('.notifications-container');
    if (!container) {
        container = document.createElement('div');
        container.className = 'notifications-container';
        container.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            display: flex;
            flex-direction: column;
            gap: 10px;
        `;
        document.body.appendChild(container);
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;

    const colors = {
        success: '#10b981',
        error: '#ef4444',
        warning: '#f59e0b',
        info: '#3b82f6'
    };

    notification.style.cssText = `
        background: ${colors[type] || colors.info};
        color: white;
        padding: 14px 20px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        animation: slideIn 0.3s ease;
        max-width: 300px;
    `;

    container.appendChild(notification);

    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => {
            notification.remove();
            if (container.children.length === 0) {
                container.remove();
            }
        }, 300);
    }, 3000);
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üéØ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª–∞–¥–∫—É Note...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –≤–∫–ª–∞–¥–∫–∞ Note
    const noteTab = document.querySelector('[data-tab="note"]');
    if (noteTab && noteTab.classList.contains('active')) {
        console.log('‚úÖ –í–∫–ª–∞–¥–∫–∞ Note –∞–∫—Ç–∏–≤–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É');
        initNotesSystem();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Note
document.addEventListener('click', (e) => {
    const tab = e.target.closest('[data-tab="note"]');
    if (tab) {
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Note');
        setTimeout(() => {
            if (!isNotesLoaded) {
                initNotesSystem();
            }
        }, 100);
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(100px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes slideOut {
        from {
            opacity: 1;
            transform: translateX(0);
        }
        to {
            opacity: 0;
            transform: translateX(100px);
        }
    }
`;
document.head.appendChild(style);

console.log('‚úÖ notes-system.js –∑–∞–≥—Ä—É–∂–µ–Ω');
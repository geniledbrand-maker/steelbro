// File: src/api/competitors.js
// Created: 2025-01-22
// Modified: 2025-01-22

/**
 * Competitors Analysis API
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ keys.so API
 */

class CompetitorsAPI {
    constructor() {
        this.baseUrl = 'keys_proxy.php';
        this.regions = {
            'msk': '–Ø–Ω–¥–µ–∫—Å: –ú–æ—Å–∫–≤–∞',
            'gru': 'Google: –ú–æ—Å–∫–≤–∞', 
            'zen': '–î–∑–µ–Ω',
            'gkv': 'Google: –ö–∏–µ–≤',
            'rnd': '–Ø–Ω–¥–µ–∫—Å: –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
            'ekb': '–Ø–Ω–¥–µ–∫—Å: –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
            'ufa': '–Ø–Ω–¥–µ–∫—Å: –£—Ñ–∞',
            'sar': '–Ø–Ω–¥–µ–∫—Å: –°–∞—Ä–∞—Ç–æ–≤',
            'krr': '–Ø–Ω–¥–µ–∫—Å: –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
            'prm': '–Ø–Ω–¥–µ–∫—Å: –ü–µ—Ä–º—å',
            'sam': '–Ø–Ω–¥–µ–∫—Å: –°–∞–º–∞—Ä–∞',
            'kry': '–Ø–Ω–¥–µ–∫—Å: –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
            'oms': '–Ø–Ω–¥–µ–∫—Å: –û–º—Å–∫',
            'kzn': '–Ø–Ω–¥–µ–∫—Å: –ö–∞–∑–∞–Ω—å',
            'che': '–Ø–Ω–¥–µ–∫—Å: –ß–µ–ª—è–±–∏–Ω—Å–∫',
            'nsk': '–Ø–Ω–¥–µ–∫—Å: –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
            'nnv': '–Ø–Ω–¥–µ–∫—Å: –ù. –ù–æ–≤–≥–æ—Ä–æ–¥',
            'vlg': '–Ø–Ω–¥–µ–∫—Å: –í–æ–ª–≥–æ–≥—Ä–∞–¥',
            'vrn': '–Ø–Ω–¥–µ–∫—Å: –í–æ—Ä–æ–Ω–µ–∂',
            'spb': '–Ø–Ω–¥–µ–∫—Å: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            'mns': '–Ø–Ω–¥–µ–∫—Å: –ú–∏–Ω—Å–∫',
            'tmn': '–Ø–Ω–¥–µ–∫—Å: –¢—é–º–µ–Ω—å',
            'gmns': 'Google: –ú–∏–Ω—Å–∫',
            'tom': '–Ø–Ω–¥–µ–∫—Å: –¢–æ–º—Å–∫',
            'gny': 'Google: New York'
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
     * @param {string[]} keywords - –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
     * @param {string} region - –†–µ–≥–∏–æ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ekb')
     * @param {number} page - –°—Ç—Ä–∞–Ω–∏—Ü–∞
     * @param {number} perPage - –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     * @returns {Promise<Object>}
     */
    async getCompetitorsByKeywords(keywords, region = 'ekb', page = 1, perPage = 50) {
        try {
            console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:', keywords);
            
            const response = await fetch(`${this.baseUrl}?endpoint=/tools/check-top-concurents-domains&base=${region}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    list: keywords,
                    page: page,
                    perPage: perPage
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            console.log('üìä –î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã:', data);
            
            return {
                success: true,
                data: data,
                region: this.regions[region] || region,
                keywords: keywords
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
            return {
                success: false,
                error: error.message,
                data: null
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
     * @param {string[]} keywords - –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
     * @param {string} region - –†–µ–≥–∏–æ–Ω
     * @param {number} page - –°—Ç—Ä–∞–Ω–∏—Ü–∞
     * @param {number} perPage - –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     * @returns {Promise<Object>}
     */
    async getCompetitorPages(keywords, region = 'ekb', page = 1, perPage = 50) {
        try {
            console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', keywords);
            
            const response = await fetch(`${this.baseUrl}?endpoint=/tools/check-top-concurents-urls&base=${region}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    list: keywords,
                    page: page,
                    perPage: perPage
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            console.log('üìä –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã:', data);
            
            return {
                success: true,
                data: data,
                region: this.regions[region] || region,
                keywords: keywords
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
            return {
                success: false,
                error: error.message,
                data: null
            };
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞
     * @param {string} domain - –î–æ–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @param {string[]} keywords - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
     * @param {string} region - –†–µ–≥–∏–æ–Ω
     * @returns {Promise<Object>}
     */
    async analyzeDomainCompetitors(domain, keywords, region = 'ekb') {
        try {
            console.log(`üéØ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è ${domain} –≤ —Ä–µ–≥–∏–æ–Ω–µ ${region}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            const competitorsResult = await this.getCompetitorsByKeywords(keywords, region);
            const pagesResult = await this.getCompetitorPages(keywords, region);
            
            if (!competitorsResult.success || !pagesResult.success) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤');
            }

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const analysis = this.analyzeCompetitorData(competitorsResult.data, pagesResult.data, domain);
            
            return {
                success: true,
                domain: domain,
                region: this.regions[region] || region,
                keywords: keywords,
                competitors: competitorsResult.data,
                pages: pagesResult.data,
                analysis: analysis
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
            return {
                success: false,
                error: error.message,
                domain: domain
            };
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
     * @param {Object} competitorsData - –î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
     * @param {Object} pagesData - –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü
     * @param {string} targetDomain - –¶–µ–ª–µ–≤–æ–π –¥–æ–º–µ–Ω
     * @returns {Object}
     */
    analyzeCompetitorData(competitorsData, pagesData, targetDomain) {
        const analysis = {
            totalCompetitors: competitorsData.total || 0,
            totalPages: pagesData.total || 0,
            topCompetitors: [],
            threats: [],
            opportunities: []
        };

        // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        if (competitorsData.data && Array.isArray(competitorsData.data)) {
            competitorsData.data.forEach(competitor => {
                if (competitor.domain && competitor.domain !== targetDomain) {
                    analysis.topCompetitors.push({
                        domain: competitor.domain,
                        traffic: competitor.traffic || 0,
                        keywords: competitor.keywords || 0,
                        positions: {
                            top1: competitor.top1 || 0,
                            top3: competitor.top3 || 0,
                            top10: competitor.top10 || 0
                        },
                        commonKeywords: competitor.common_keywords || 0
                    });
                }
            });
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        analysis.topCompetitors.sort((a, b) => b.commonKeywords - a.commonKeywords);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–≥—Ä–æ–∑—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        analysis.topCompetitors.forEach(competitor => {
            if (competitor.commonKeywords > 10) {
                analysis.threats.push({
                    domain: competitor.domain,
                    reason: `–í—ã—Å–æ–∫–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (${competitor.commonKeywords})`,
                    severity: competitor.commonKeywords > 50 ? 'high' : 'medium'
                });
            }
            
            if (competitor.positions.top1 > 0) {
                analysis.opportunities.push({
                    domain: competitor.domain,
                    reason: `–ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –¢–û–ü-1 (${competitor.positions.top1})`,
                    potential: 'high'
                });
            }
        });

        return analysis;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
     * @returns {Object}
     */
    getAvailableRegions() {
        return this.regions;
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     * @returns {string}
     */
    exportToCSV(data) {
        if (!data || !data.topCompetitors) {
            return '';
        }

        const headers = ['–î–æ–º–µ–Ω', '–¢—Ä–∞—Ñ–∏–∫', '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', '–¢–û–ü-1', '–¢–û–ü-3', '–¢–û–ü-10', '–û–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'];
        const rows = data.topCompetitors.map(competitor => [
            competitor.domain,
            competitor.traffic,
            competitor.keywords,
            competitor.positions.top1,
            competitor.positions.top3,
            competitor.positions.top10,
            competitor.commonKeywords
        ]);

        const csvContent = [headers, ...rows]
            .map(row => row.map(cell => `"${cell}"`).join(','))
            .join('\n');

        return csvContent;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CompetitorsAPI;
} else {
    window.CompetitorsAPI = CompetitorsAPI;
}

// End of file: src/api/competitors.js
// Last modified: 2025-01-22

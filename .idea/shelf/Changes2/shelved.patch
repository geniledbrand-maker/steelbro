Index: Local/tools/passgnld/notes-system.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* ==================== NOTES SYSTEM ==================== */\r\n\r\n// Глобальные переменные для заметок\r\nlet notesData = [];\r\nlet currentNoteId = null;\r\nlet isNotesLoaded = false;\r\nlet notesTagLibrary = new Map();\r\nlet notesTagColors = {};\r\nlet notesSavedColors = [];\r\nlet activeTagFilters = new Set();\r\nlet notesTagManagerState = {\r\n    isOpen: false,\r\n    selectedTag: null\r\n};\r\nlet saveNotesDeferred = null;\r\nconst DEFAULT_TAG_COLOR_PALETTE = [\r\n    '#6366f1', '#8b5cf6', '#ec4899', '#ef4444', '#f97316',\r\n    '#facc15', '#22c55e', '#2dd4bf', '#0ea5e9', '#3b82f6',\r\n    '#14b8a6', '#f472b6'\r\n];\r\n\r\nconst SAVE_DEBOUNCE_DELAY = 600;\r\n\r\nfunction scheduleNotesSave(options = {}) {\r\n    if (saveNotesDeferred) {\r\n        clearTimeout(saveNotesDeferred);\r\n    }\r\n    const opts = { silent: true, reason: 'metadata', ...options };\r\n    saveNotesDeferred = setTimeout(() => {\r\n        saveNotesToServer(opts);\r\n        saveNotesDeferred = null;\r\n    }, SAVE_DEBOUNCE_DELAY);\r\n}\r\n\r\nfunction normalizeHexColor(color) {\r\n    if (typeof color !== 'string' || color.trim() === '') {\r\n        return '#6366f1';\r\n    }\r\n    let hex = color.trim();\r\n    if (!hex.startsWith('#')) {\r\n        hex = `#${hex}`;\r\n    }\r\n    if (hex.length === 4) {\r\n        hex = '#' + hex.slice(1).split('').map(ch => ch + ch).join('');\r\n    }\r\n    if (hex.length !== 7) {\r\n        return '#6366f1';\r\n    }\r\n    return hex.toLowerCase();\r\n}\r\n\r\nfunction hexToRgb(hex) {\r\n    const normalized = normalizeHexColor(hex).replace('#', '');\r\n    const intVal = parseInt(normalized, 16);\r\n    return {\r\n        r: (intVal >> 16) & 255,\r\n        g: (intVal >> 8) & 255,\r\n        b: intVal & 255\r\n    };\r\n}\r\n\r\nfunction rgbToHex(r, g, b) {\r\n    const toHex = (value) => {\r\n        const v = Math.max(0, Math.min(255, Math.round(value)));\r\n        return v.toString(16).padStart(2, '0');\r\n    };\r\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\r\n}\r\n\r\nfunction adjustColor(hex, percent) {\r\n    const { r, g, b } = hexToRgb(hex);\r\n    const amount = percent / 100;\r\n    const adjustChannel = (channel) => {\r\n        if (amount === 0) {\r\n            return channel;\r\n        }\r\n        const target = amount > 0 ? 255 : 0;\r\n        return channel + (target - channel) * Math.abs(amount);\r\n    };\r\n    return rgbToHex(\r\n        adjustChannel(r),\r\n        adjustChannel(g),\r\n        adjustChannel(b)\r\n    );\r\n}\r\n\r\nfunction hslToHex(h, s, l) {\r\n    s /= 100;\r\n    l /= 100;\r\n\r\n    const k = (n) => (n + h / 30) % 12;\r\n    const a = s * Math.min(l, 1 - l);\r\n    const f = (n) => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));\r\n\r\n    return rgbToHex(255 * f(0), 255 * f(8), 255 * f(4));\r\n}\r\n\r\nfunction generateColorFromString(value) {\r\n    let hash = 0;\r\n    const str = String(value || '');\r\n    for (let i = 0; i < str.length; i++) {\r\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    const hue = Math.abs(hash) % 360;\r\n    return hslToHex(hue, 65, 55);\r\n}\r\n\r\nfunction getReadableTextColor(hex) {\r\n    const { r, g, b } = hexToRgb(hex);\r\n    // W3C recommended formula\r\n    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\r\n    return luminance > 0.6 ? '#111827' : '#ffffff';\r\n}\r\n\r\nfunction getTagColor(tag) {\r\n    const key = (tag || '').trim();\r\n    if (!key) {\r\n        return '#6366f1';\r\n    }\r\n    if (!notesTagColors[key]) {\r\n        notesTagColors[key] = generateColorFromString(key);\r\n    }\r\n    return normalizeHexColor(notesTagColors[key]);\r\n}\r\n\r\nfunction setTagColor(tag, color, options = {}) {\r\n    const key = (tag || '').trim();\r\n    if (!key) {\r\n        return;\r\n    }\r\n    const normalized = normalizeHexColor(color);\r\n    if (notesTagColors[key] === normalized) {\r\n        return;\r\n    }\r\n    notesTagColors[key] = normalized;\r\n    rebuildTagLibrary();\r\n    renderTagManager();\r\n    if (options.immediateSave) {\r\n        saveNotesToServer({ silent: true, reason: 'tag-color-change' });\r\n    } else {\r\n        scheduleNotesSave({ reason: 'tag-color-change' });\r\n    }\r\n}\r\n\r\nfunction addSavedColor(color) {\r\n    const normalized = normalizeHexColor(color);\r\n    if (!notesSavedColors.includes(normalized)) {\r\n        notesSavedColors.push(normalized);\r\n        if (notesSavedColors.length > 24) {\r\n            notesSavedColors = notesSavedColors.slice(-24);\r\n        }\r\n        renderSavedColorChips();\r\n        scheduleNotesSave({ reason: 'save-color' });\r\n    }\r\n}\r\n\r\nfunction removeSavedColor(index) {\r\n    if (index >= 0 && index < notesSavedColors.length) {\r\n        notesSavedColors.splice(index, 1);\r\n        renderSavedColorChips();\r\n        scheduleNotesSave({ reason: 'remove-color' });\r\n    }\r\n}\r\n\r\nfunction clearSavedColors() {\r\n    if (notesSavedColors.length === 0) {\r\n        return;\r\n    }\r\n    notesSavedColors = [];\r\n    renderSavedColorChips();\r\n    scheduleNotesSave({ reason: 'clear-colors' });\r\n}\r\n\r\n// Инициализация системы заметок\r\nfunction initNotesSystem() {\r\n    console.log('\uD83D\uDE80 Инициализация системы заметок...');\r\n\r\n    // Загружаем заметки при инициализации\r\n    loadNotesFromServer();\r\n\r\n    // Инициализируем Markdown toolbar\r\n    initMarkdownToolbar();\r\n\r\n    // Обработчики кнопок\r\n    const newNoteBtn = document.querySelector('.notes-new-btn');\r\n    if (newNoteBtn) {\r\n        newNoteBtn.addEventListener('click', createNewNote);\r\n    }\r\n\r\n    const saveBtn = document.querySelector('.notes-save-btn');\r\n    if (saveBtn) {\r\n        saveBtn.addEventListener('click', saveCurrentNote);\r\n        console.log('✅ Кнопка сохранения подключена');\r\n    }\r\n\r\n    const deleteBtn = document.querySelector('.notes-delete-btn');\r\n    if (deleteBtn) {\r\n        deleteBtn.addEventListener('click', deleteCurrentNote);\r\n    }\r\n\r\n    // РџРѕРёСЃРє\r\n    const searchInput = document.querySelector('.notes-search-input');\r\n    if (searchInput) {\r\n        searchInput.addEventListener('input', (e) => {\r\n            filterNotes(e.target.value);\r\n        });\r\n    }\r\n\r\n    // Теги\r\n    const addTagBtn = document.querySelector('.notes-add-tag-btn');\r\n    if (addTagBtn) {\r\n        addTagBtn.addEventListener('click', addTag);\r\n    }\r\n\r\n    const tagInput = document.querySelector('.notes-tags-input-group input');\r\n    if (tagInput) {\r\n        tagInput.addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter') {\r\n                e.preventDefault();\r\n                addTag();\r\n            }\r\n        });\r\n    }\r\n\r\n    // Live preview\r\n    const markdownEditor = document.querySelector('.notes-markdown-editor');\r\n    if (markdownEditor) {\r\n        markdownEditor.addEventListener('input', updateMarkdownPreview);\r\n    }\r\n\r\n    const tagsLibraryContainer = document.getElementById('notesTagsLibrary');\r\n    if (tagsLibraryContainer && !tagsLibraryContainer.dataset.bound) {\r\n        tagsLibraryContainer.addEventListener('click', (event) => {\r\n            const tagButton = event.target.closest('.notes-library-tag');\r\n            if (!tagButton) {\r\n                return;\r\n            }\r\n            const tagValue = tagButton.getAttribute('data-library-tag');\r\n            if (!tagValue) {\r\n                return;\r\n            }\r\n\r\n            if (event.target.classList.contains('notes-library-tag-remove')) {\r\n                removeTagFromLibrary(tagValue);\r\n            } else {\r\n                toggleTagFromLibrary(tagValue);\r\n            }\r\n        });\r\n        tagsLibraryContainer.dataset.bound = 'true';\r\n    }\r\n\r\n    const manageTagsBtn = document.getElementById('notesManageTagsBtn');\r\n    if (manageTagsBtn && !manageTagsBtn.dataset.bound) {\r\n        manageTagsBtn.addEventListener('click', () => openTagManager());\r\n        manageTagsBtn.dataset.bound = 'true';\r\n    }\r\n\r\n    const clearFiltersBtn = document.getElementById('notesClearFiltersBtn');\r\n    if (clearFiltersBtn && !clearFiltersBtn.dataset.bound) {\r\n        clearFiltersBtn.addEventListener('click', () => {\r\n            if (activeTagFilters.size > 0) {\r\n                activeTagFilters.clear();\r\n                renderNotesList();\r\n                renderTagFilters();\r\n            }\r\n        });\r\n        clearFiltersBtn.dataset.bound = 'true';\r\n    }\r\n\r\n    const filterContainer = document.getElementById('notesFilterTags');\r\n    if (filterContainer && !filterContainer.dataset.bound) {\r\n        filterContainer.addEventListener('click', (event) => {\r\n            const chip = event.target.closest('[data-filter-tag]');\r\n            if (!chip) {\r\n                return;\r\n            }\r\n            const tag = chip.getAttribute('data-filter-tag');\r\n            toggleTagFilter(tag);\r\n        });\r\n        filterContainer.dataset.bound = 'true';\r\n    }\r\n\r\n    bindTagManagerEvents();\r\n\r\n    rebuildTagLibrary();\r\n    renderTagFilters();\r\n    renderSavedColorChips();\r\n\r\n    console.log('✅ Система заметок инициализирована');\r\n}\r\n\r\n/* ==================== MARKDOWN TOOLBAR FUNCTIONS ==================== */\r\n\r\n// Инициализация Markdown панели инструментов\r\nfunction initMarkdownToolbar() {\r\n    console.log('\uD83C\uDFA8 Инициализация Markdown toolbar...');\r\n\r\n    // Добавляем обработчики на все кнопки\r\n    const buttons = document.querySelectorAll('.markdown-toolbar-btn');\r\n\r\n    if (buttons.length === 0) {\r\n        console.warn('⚠\uFE0F Кнопки toolbar не найдены');\r\n        return;\r\n    }\r\n\r\n    buttons.forEach(btn => {\r\n        // Удаляем старые обработчики\r\n        const newBtn = btn.cloneNode(true);\r\n        btn.parentNode.replaceChild(newBtn, btn);\r\n\r\n        // Добавляем новый обработчик\r\n        newBtn.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            const action = newBtn.dataset.action;\r\n            if (action) {\r\n                applyMarkdownFormat(action);\r\n            }\r\n        });\r\n    });\r\n\r\n    console.log(`✅ Markdown toolbar инициализирован (${buttons.length} кнопок)`);\r\n}\r\n\r\n// Применение Markdown форматирования\r\nfunction applyMarkdownFormat(action) {\r\n    const editor = document.querySelector('.notes-markdown-editor');\r\n    if (!editor) return;\r\n\r\n    const start = editor.selectionStart;\r\n    const end = editor.selectionEnd;\r\n    const selectedText = editor.value.substring(start, end);\r\n    const beforeText = editor.value.substring(0, start);\r\n    const afterText = editor.value.substring(end);\r\n\r\n    let newText = '';\r\n    let cursorOffset = 0;\r\n\r\n    switch (action) {\r\n        case 'bold':\r\n            newText = `**${selectedText || 'жирный текст'}**`;\r\n            cursorOffset = selectedText ? newText.length : 2;\r\n            break;\r\n\r\n        case 'italic':\r\n            newText = `*${selectedText || 'РєСѓСЂСЃРёРІ'}*`;\r\n            cursorOffset = selectedText ? newText.length : 1;\r\n            break;\r\n\r\n        case 'strikethrough':\r\n            newText = `~~${selectedText || 'зачеркнутый'}~~`;\r\n            cursorOffset = selectedText ? newText.length : 2;\r\n            break;\r\n\r\n        case 'heading1':\r\n            newText = `# ${selectedText || 'Заголовок 1'}`;\r\n            cursorOffset = newText.length;\r\n            break;\r\n\r\n        case 'heading2':\r\n            newText = `## ${selectedText || 'Заголовок 2'}`;\r\n            cursorOffset = newText.length;\r\n            break;\r\n\r\n        case 'heading3':\r\n            newText = `### ${selectedText || 'Заголовок 3'}`;\r\n            cursorOffset = newText.length;\r\n            break;\r\n\r\n        case 'code-inline':\r\n            newText = `\\`${selectedText || 'РєРѕРґ'}\\``;\r\n            cursorOffset = selectedText ? newText.length : 1;\r\n            break;\r\n\r\n        case 'code-block':\r\n            newText = `\\`\\`\\`javascript\\n${selectedText || '// ваш код здесь'}\\n\\`\\`\\``;\r\n            cursorOffset = selectedText ? newText.length : 14;\r\n            break;\r\n\r\n        case 'quote':\r\n            newText = `> ${selectedText || 'Цитата'}`;\r\n            cursorOffset = newText.length;\r\n            break;\r\n\r\n        case 'list-ul':\r\n            if (selectedText) {\r\n                const lines = selectedText.split('\\n');\r\n                newText = lines.map(line => `- ${line}`).join('\\n');\r\n                cursorOffset = newText.length;\r\n            } else {\r\n                newText = '- Элемент списка\\n- Элемент списка\\n- Элемент списка';\r\n                cursorOffset = newText.length;\r\n            }\r\n            break;\r\n\r\n        case 'list-ol':\r\n            if (selectedText) {\r\n                const lines = selectedText.split('\\n');\r\n                newText = lines.map((line, i) => `${i + 1}. ${line}`).join('\\n');\r\n                cursorOffset = newText.length;\r\n            } else {\r\n                newText = '1. Первый пункт\\n2. Второй пункт\\n3. Третий пункт';\r\n                cursorOffset = newText.length;\r\n            }\r\n            break;\r\n\r\n        case 'link':\r\n            newText = `[${selectedText || 'текст ссылки'}](https://example.com)`;\r\n            cursorOffset = selectedText ? newText.length - 21 : 1;\r\n            break;\r\n\r\n        case 'image':\r\n            newText = `![${selectedText || 'описание'}](https://example.com/image.jpg)`;\r\n            cursorOffset = selectedText ? newText.length - 33 : 2;\r\n            break;\r\n\r\n        case 'table':\r\n            newText = `| Заголовок 1 | Заголовок 2 | Заголовок 3 |\\n|-------------|-------------|-------------|\\n| Ячейка 1    | Ячейка 2    | Ячейка 3    |\\n| Ячейка 4    | Ячейка 5    | Ячейка 6    |`;\r\n            cursorOffset = newText.length;\r\n            break;\r\n\r\n        case 'hr':\r\n            newText = '\\n---\\n';\r\n            cursorOffset = newText.length;\r\n            break;\r\n\r\n        case 'task':\r\n            newText = '- [ ] Задача не выполнена\\n- [x] Задача выполнена';\r\n            cursorOffset = newText.length;\r\n            break;\r\n\r\n        default:\r\n            return;\r\n    }\r\n\r\n    // Вставляем новый текст\r\n    editor.value = beforeText + newText + afterText;\r\n\r\n    // Устанавливаем курсор\r\n    const newCursorPos = start + cursorOffset;\r\n    editor.setSelectionRange(newCursorPos, newCursorPos);\r\n    editor.focus();\r\n\r\n    // Обновляем preview\r\n    updateMarkdownPreview();\r\n\r\n    console.log(`✏\uFE0F Применено форматирование: ${action}`);\r\n}\r\n\r\n// Загрузка заметок с сервера\r\nasync function loadNotesFromServer() {\r\n    try {\r\n        console.log('\uD83D\uDCE5 Загрузка заметок с сервера...');\r\n        const response = await fetch('api.php?action=loadNotes', {\r\n            cache: 'no-store'\r\n        });\r\n        const data = await response.json();\r\n\r\n        if (data.success) {\r\n            const receivedNotes = Array.isArray(data.notes) ? data.notes : (Array.isArray(data) ? data : []);\r\n            notesData = receivedNotes || [];\r\n\r\n            const receivedTagColors = data.tagColors && typeof data.tagColors === 'object' ? data.tagColors : {};\r\n            notesTagColors = {};\r\n            Object.keys(receivedTagColors).forEach((tag) => {\r\n                notesTagColors[tag] = normalizeHexColor(receivedTagColors[tag]);\r\n            });\r\n\r\n            const receivedSavedColors = Array.isArray(data.savedColors) ? data.savedColors : [];\r\n            notesSavedColors = receivedSavedColors.map((color) => normalizeHexColor(color));\r\n\r\n            console.log(`✅ Загружено заметок: ${notesData.length}`);\r\n            console.log('\uD83D\uDCC1 Файл:', data.file || 'не задан');\r\n            console.log('\uD83C\uDFA8 Теги с цветами:', Object.keys(notesTagColors).length);\r\n\r\n            renderNotesList();\r\n            rebuildTagLibrary();\r\n            renderTagFilters();\r\n            renderSavedColorChips();\r\n            renderTagManager();\r\n\r\n            isNotesLoaded = true;\r\n        } else {\r\n            console.error('❌ Ошибка загрузки:', data.error);\r\n            showNotification('Ошибка загрузки заметок: ' + data.error, 'error');\r\n        }\r\n    } catch (error) {\r\n        console.error('❌ Ошибка при загрузке заметок:', error);\r\n        showNotification('Ошибка подключения к серверу', 'error');\r\n    }\r\n}\r\n\r\n// Сохранение заметок на сервер\r\nasync function saveNotesToServer(options = {}) {\r\n    const { silent = false, reason = 'manual' } = options;\r\n    try {\r\n        if (!silent) {\r\n            console.log('\uD83D\uDCBE Сохранение заметок на сервер...');\r\n        }\r\n        console.log('\uD83D\uDCDD Причина сохранения:', reason);\r\n\r\n        const normalizedTagColors = {};\r\n        Object.keys(notesTagColors).forEach((tag) => {\r\n            normalizedTagColors[tag] = normalizeHexColor(notesTagColors[tag]);\r\n        });\r\n\r\n        const normalizedSavedColors = notesSavedColors.map((color) => normalizeHexColor(color));\r\n\r\n        const payload = {\r\n            notes: notesData,\r\n            tagColors: normalizedTagColors,\r\n            savedColors: normalizedSavedColors\r\n        };\r\n\r\n        if (!silent) {\r\n            console.log('\uD83D\uDCCA Данные для сохранения:', payload);\r\n        }\r\n\r\n        const response = await fetch('api.php?action=saveNotes', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            cache: 'no-store',\r\n            body: JSON.stringify(payload)\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.success) {\r\n            console.log('✅ Заметки успешно сохранены');\r\n            console.log('\uD83D\uDCCA Сохранено записей:', data.saved);\r\n            console.log('\uD83D\uDCC1 Файл:', data.file);\r\n\r\n            if (data.tagColors && typeof data.tagColors === 'object') {\r\n                notesTagColors = {};\r\n                Object.keys(data.tagColors).forEach((tag) => {\r\n                    notesTagColors[tag] = normalizeHexColor(data.tagColors[tag]);\r\n                });\r\n            }\r\n\r\n            if (Array.isArray(data.savedColors)) {\r\n                notesSavedColors = data.savedColors.map((color) => normalizeHexColor(color));\r\n            }\r\n\r\n            if (!silent) {\r\n                showNotification('Заметка сохранена успешно! ✓', 'success');\r\n            }\r\n            return true;\r\n        } else {\r\n            console.error('❌ Ошибка сохранения:', data.error);\r\n            if (!silent) {\r\n                showNotification('Ошибка сохранения: ' + data.error, 'error');\r\n            }\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        console.error('❌ Ошибка при сохранении заметок:', error);\r\n        if (!silent) {\r\n            showNotification('Ошибка подключения к серверу', 'error');\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n// Создание новой заметки\r\nfunction createNewNote() {\r\n    const newNote = {\r\n        id: Date.now(),\r\n        title: 'Новая заметка',\r\n        content: '',\r\n        tags: [],\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    notesData.unshift(newNote);\r\n    renderNotesList();\r\n    openNote(newNote.id);\r\n\r\n    // Фокус на заголовок\r\n    setTimeout(() => {\r\n        const titleInput = document.querySelector('.notes-title-input');\r\n        if (titleInput) {\r\n            titleInput.select();\r\n        }\r\n\r\n        // ВАЖНО: Инициализируем toolbar для новой заметки\r\n        initMarkdownToolbar();\r\n    }, 100);\r\n\r\n    console.log('✨ Создана новая заметка:', newNote.id);\r\n}\r\n\r\n// Сохранение текущей заметки\r\nasync function saveCurrentNote() {\r\n    if (!currentNoteId) {\r\n        showNotification('Нет открытой заметки для сохранения', 'warning');\r\n        return;\r\n    }\r\n\r\n    const note = notesData.find(n => n.id === currentNoteId);\r\n    if (!note) {\r\n        showNotification('Заметка не найдена', 'error');\r\n        return;\r\n    }\r\n\r\n    // Получаем данные из формы\r\n    const titleInput = document.querySelector('.notes-title-input');\r\n    const contentInput = document.querySelector('.notes-markdown-editor');\r\n\r\n    if (titleInput) {\r\n        note.title = titleInput.value.trim() || 'Без названия';\r\n    }\r\n\r\n    if (contentInput) {\r\n        note.content = contentInput.value;\r\n    }\r\n\r\n    note.updatedAt = new Date().toISOString();\r\n\r\n    console.log('\uD83D\uDCBE Сохранение заметки:', {\r\n        id: note.id,\r\n        title: note.title,\r\n        contentLength: note.content.length,\r\n        tags: note.tags\r\n    });\r\n\r\n    // Сохраняем на сервер\r\n    const saved = await saveNotesToServer();\r\n\r\n    if (saved) {\r\n        // Обновляем список\r\n        renderNotesList();\r\n\r\n        // Выделяем сохраненную заметку\r\n        highlightNote(currentNoteId);\r\n    }\r\n}\r\n\r\n// Удаление заметки\r\nasync function deleteCurrentNote() {\r\n    if (!currentNoteId) {\r\n        showNotification('Нет открытой заметки для удаления', 'warning');\r\n        return;\r\n    }\r\n\r\n    const note = notesData.find(n => n.id === currentNoteId);\r\n    if (!note) return;\r\n\r\n    if (confirm(`Удалить заметку \"${note.title}\"?`)) {\r\n        notesData = notesData.filter(n => n.id !== currentNoteId);\r\n\r\n        // Сохраняем изменения\r\n        await saveNotesToServer();\r\n\r\n        // Обновляем UI\r\n        renderNotesList();\r\n        closeEditor();\r\n\r\n        showNotification('Заметка удалена', 'success');\r\n        console.log('\uD83D\uDDD1\uFE0F Заметка удалена:', currentNoteId);\r\n    }\r\n}\r\n\r\n// Открытие заметки\r\nfunction openNote(noteId) {\r\n    const note = notesData.find(n => n.id === noteId);\r\n    if (!note) return;\r\n\r\n    currentNoteId = noteId;\r\n\r\n    // Показываем редактор\r\n    const editorContainer = document.querySelector('.notes-editor-container');\r\n    const emptyEditor = document.querySelector('.notes-empty-editor');\r\n\r\n    if (editorContainer) {\r\n        editorContainer.classList.remove('hidden');\r\n    }\r\n    if (emptyEditor) {\r\n        emptyEditor.classList.add('hidden');\r\n    }\r\n\r\n    // Заполняем данные\r\n    const titleInput = document.querySelector('.notes-title-input');\r\n    const contentInput = document.querySelector('.notes-markdown-editor');\r\n\r\n    if (titleInput) {\r\n        titleInput.value = note.title;\r\n    }\r\n\r\n    if (contentInput) {\r\n        contentInput.value = note.content;\r\n        updateMarkdownPreview();\r\n    }\r\n\r\n    // Отображаем теги\r\n    renderTags(note.tags);\r\n\r\n    // Подсветка активной заметки в списке\r\n    highlightNote(noteId);\r\n\r\n    // ВАЖНО: Реинициализируем toolbar если его еще нет\r\n    if (!document.querySelector('.markdown-toolbar')?.hasChildNodes()) {\r\n        setTimeout(() => initMarkdownToolbar(), 100);\r\n    }\r\n\r\n    console.log('\uD83D\uDCD6 Открыта заметка:', note.title);\r\n}\r\n\r\n// Подсветка активной заметки\r\nfunction highlightNote(noteId) {\r\n    document.querySelectorAll('.note-item').forEach(item => {\r\n        if (parseInt(item.dataset.noteId) === noteId) {\r\n            item.classList.add('active');\r\n        } else {\r\n            item.classList.remove('active');\r\n        }\r\n    });\r\n}\r\n\r\n// Закрытие редактора\r\nfunction closeEditor() {\r\n    currentNoteId = null;\r\n\r\n    const editorContainer = document.querySelector('.notes-editor-container');\r\n    const emptyEditor = document.querySelector('.notes-empty-editor');\r\n\r\n    if (editorContainer) {\r\n        editorContainer.classList.add('hidden');\r\n    }\r\n    if (emptyEditor) {\r\n        emptyEditor.classList.remove('hidden');\r\n    }\r\n\r\n    // Убираем подсветку\r\n    document.querySelectorAll('.note-item').forEach(item => {\r\n        item.classList.remove('active');\r\n    });\r\n}\r\n\r\n// Отрисовка списка заметок\r\nfunction renderNotesList() {\r\n    const notesList = document.querySelector('.notes-list');\r\n    if (!notesList) return;\r\n\r\n    const activeFiltersArray = Array.from(activeTagFilters);\r\n    const hasFilters = activeFiltersArray.length > 0;\r\n    const filteredNotes = hasFilters\r\n        ? notesData.filter(note => {\r\n            const noteTags = new Set(note.tags || []);\r\n            return activeFiltersArray.every(tag => noteTags.has(tag));\r\n        })\r\n        : notesData;\r\n\r\n    if (filteredNotes.length === 0) {\r\n        notesList.innerHTML = `\r\n            <div class=\"notes-empty-state\">\r\n                <svg width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                    <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n                    <polyline points=\"14 2 14 8 20 8\"></polyline>\r\n                </svg>\r\n                <p>${hasFilters ? 'Под подходящий фильтр не попадает ни одна заметка' : 'Заметок пока нет'}</p>\r\n                <small>${hasFilters ? 'Попробуйте изменить фильтр по тегам' : 'Создайте первую заметку'}</small>\r\n            </div>\r\n        `;\r\n        return;\r\n    }\r\n\r\n    notesList.innerHTML = filteredNotes.map(note => {\r\n        const preview = note.content.substring(0, 100).replace(/[#*`\\n]/g, ' ').trim();\r\n        const date = new Date(note.updatedAt).toLocaleDateString('ru-RU', {\r\n            day: '2-digit',\r\n            month: '2-digit',\r\n            year: 'numeric'\r\n        });\r\n\r\n        return `\r\n            <div class=\"note-item ${note.id === currentNoteId ? 'active' : ''}\" \r\n                 data-note-id=\"${note.id}\"\r\n                 onclick=\"openNote(${note.id})\">\r\n                <div class=\"note-item-title\">${escapeHtml(note.title)}</div>\r\n                <div class=\"note-item-preview\">${escapeHtml(preview) || '(пусто)'}</div>\r\n                <div class=\"note-item-meta\">\r\n                    <span>${date}</span>\r\n                    <span>${note.content.length} СЃРёРј.</span>\r\n                </div>\r\n                ${note.tags.length > 0 ? `\r\n                    <div class=\"note-item-tags\">\r\n                        ${note.tags.map(tag => `\r\n                            <span class=\"note-item-tag\">${escapeHtml(tag)}</span>\r\n                        `).join('')}\r\n                    </div>\r\n                ` : ''}\r\n            </div>\r\n        `;\r\n    }).join('');\r\n\r\n    console.log('\uD83D\uDCCB Список заметок обновлен:', filteredNotes.length, 'из', notesData.length);\r\n}\r\n\r\n// Добавление тега\r\nfunction addTag() {\r\n    if (!currentNoteId) return;\r\n\r\n    const note = notesData.find(n => n.id === currentNoteId);\r\n    if (!note) return;\r\n\r\n    const tagInput = document.querySelector('.notes-tags-input-group input');\r\n    if (!tagInput) return;\r\n\r\n    const tagValue = tagInput.value.trim();\r\n    if (!tagValue) return;\r\n\r\n    if (note.tags.includes(tagValue)) {\r\n        showNotification('Такой тег уже существует', 'warning');\r\n        return;\r\n    }\r\n\r\n    note.tags.push(tagValue);\r\n    renderTags(note.tags);\r\n    tagInput.value = '';\r\n    rebuildTagLibrary();\r\n\r\n    console.log('\uD83C\uDFF7\uFE0F Добавлен тег:', tagValue);\r\n}\r\n\r\n// Удаление тега\r\nfunction removeTag(tag) {\r\n    if (!currentNoteId) return;\r\n\r\n    const note = notesData.find(n => n.id === currentNoteId);\r\n    if (!note) return;\r\n\r\n    note.tags = note.tags.filter(t => t !== tag);\r\n    renderTags(note.tags);\r\n    rebuildTagLibrary();\r\n\r\n    console.log('\uD83D\uDDD1\uFE0F Удален тег:', tag);\r\n}\r\n\r\n// Отрисовка тегов\r\nfunction renderTags(tags) {\r\n    const tagsList = document.querySelector('.notes-tags-list');\r\n    if (!tagsList) return;\r\n\r\n    if (tags.length === 0) {\r\n        tagsList.innerHTML = '<span class=\"notes-tags-placeholder\">Теги не добавлены</span>';\r\n        return;\r\n    }\r\n\r\n    tagsList.innerHTML = tags.map(tag => `\r\n        <span class=\"note-tag\">\r\n            ${escapeHtml(tag)}\r\n            <span class=\"note-tag-remove\" onclick=\"removeTag('${escapeHtml(tag)}')\">Г—</span>\r\n        </span>\r\n    `).join('');\r\n}\r\n\r\n// Фильтрация заметок\r\nfunction filterNotes(searchQuery) {\r\n    const query = searchQuery.toLowerCase().trim();\r\n\r\n    document.querySelectorAll('.note-item').forEach(item => {\r\n        const noteId = parseInt(item.dataset.noteId);\r\n        const note = notesData.find(n => n.id === noteId);\r\n\r\n        if (!note) return;\r\n\r\n        const searchIn = [\r\n            note.title,\r\n            note.content,\r\n            ...note.tags\r\n        ].join(' ').toLowerCase();\r\n\r\n        if (searchIn.includes(query)) {\r\n            item.style.display = 'block';\r\n        } else {\r\n            item.style.display = 'none';\r\n        }\r\n    });\r\n}\r\n\r\n// Обновление preview Markdown\r\nfunction updateMarkdownPreview() {\r\n    const editor = document.querySelector('.notes-markdown-editor');\r\n    const preview = document.querySelector('.notes-preview-content');\r\n\r\n    if (!editor || !preview) return;\r\n\r\n    const content = editor.value;\r\n\r\n    if (!content.trim()) {\r\n        preview.innerHTML = '<div class=\"notes-preview-placeholder\">Начните писать...</div>';\r\n        return;\r\n    }\r\n\r\n    // Используем marked.js для рендера\r\n    if (typeof marked !== 'undefined') {\r\n        try {\r\n            // Настройка marked\r\n            marked.setOptions({\r\n                breaks: true,\r\n                gfm: true,\r\n                sanitize: false\r\n            });\r\n\r\n            const html = marked.parse(content);\r\n            preview.innerHTML = html;\r\n\r\n            // Подсветка кода если есть highlight.js\r\n            if (typeof hljs !== 'undefined') {\r\n                preview.querySelectorAll('pre code').forEach((block) => {\r\n                    hljs.highlightElement(block);\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка рендера Markdown:', error);\r\n            preview.innerHTML = '<div class=\"notes-preview-placeholder\">Ошибка рендера</div>';\r\n        }\r\n    } else {\r\n        // Fallback без marked.js - простая замена\r\n        const html = content\r\n            .replace(/</g, '&lt;')\r\n            .replace(/>/g, '&gt;')\r\n            .replace(/\\n/g, '<br>');\r\n        preview.innerHTML = html;\r\n    }\r\n}\r\n\r\n// Уведомления\r\nfunction showNotification(message, type = 'info') {\r\n    // Создаем контейнер для уведомлений если его нет\r\n    let container = document.querySelector('.notifications-container');\r\n    if (!container) {\r\n        container = document.createElement('div');\r\n        container.className = 'notifications-container';\r\n        container.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            z-index: 10000;\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 10px;\r\n        `;\r\n        document.body.appendChild(container);\r\n    }\r\n\r\n    // Создаем уведомление\r\n    const notification = document.createElement('div');\r\n    notification.className = `notification notification-${type}`;\r\n    notification.textContent = message;\r\n\r\n    const colors = {\r\n        success: '#10b981',\r\n        error: '#ef4444',\r\n        warning: '#f59e0b',\r\n        info: '#3b82f6'\r\n    };\r\n\r\n    notification.style.cssText = `\r\n        background: ${colors[type] || colors.info};\r\n        color: white;\r\n        padding: 14px 20px;\r\n        border-radius: 8px;\r\n        font-size: 14px;\r\n        font-weight: 500;\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n        animation: slideIn 0.3s ease;\r\n        max-width: 300px;\r\n    `;\r\n\r\n    container.appendChild(notification);\r\n\r\n    // Автоудаление через 3 секунды\r\n    setTimeout(() => {\r\n        notification.style.animation = 'slideOut 0.3s ease';\r\n        setTimeout(() => {\r\n            notification.remove();\r\n            if (container.children.length === 0) {\r\n                container.remove();\r\n            }\r\n        }, 300);\r\n    }, 3000);\r\n}\r\n\r\n// Экранирование HTML\r\nfunction escapeHtml(text) {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n}\r\nfunction escapeAttribute(value) {\r\n    return escapeHtml(value).replace(/\"/g, '&quot;').replace(/'/g, '&#39;');\r\n}\r\n\r\nfunction rebuildTagLibrary() {\r\n    const library = new Map();\r\n\r\n    notesData.forEach((note) => {\r\n        (note.tags || []).forEach((tag) => {\r\n            const trimmed = (tag || '').trim();\r\n            if (!trimmed) {\r\n                return;\r\n            }\r\n            const entry = library.get(trimmed) || { count: 0, color: getTagColor(trimmed) };\r\n            entry.count += 1;\r\n            library.set(trimmed, entry);\r\n        });\r\n    });\r\n\r\n    Object.keys(notesTagColors).forEach((tag) => {\r\n        if (!library.has(tag)) {\r\n            library.set(tag, { count: 0, color: getTagColor(tag) });\r\n        }\r\n    });\r\n\r\n    notesTagLibrary = library;\r\n\r\n    renderAvailableTags();\r\n    renderTagFilters();\r\n}\r\n\r\nfunction renderAvailableTags() {\r\n    const libraryContainer = document.getElementById('notesTagsLibrary');\r\n    if (!libraryContainer) {\r\n        return;\r\n    }\r\n\r\n    if (notesTagLibrary.size === 0) {\r\n        libraryContainer.innerHTML = '<span class=\"notes-tags-placeholder\">Сохранённых тегов пока нет</span>';\r\n        return;\r\n    }\r\n\r\n    const currentNote = currentNoteId ? notesData.find(n => n.id === currentNoteId) : null;\r\n    const currentTags = currentNote ? new Set(currentNote.tags || []) : new Set();\r\n\r\n    const sortedTags = Array.from(notesTagLibrary.entries())\r\n        .sort((a, b) => a[0].localeCompare(b[0], 'ru'));\r\n\r\n    const items = sortedTags.map(([tag, info]) => {\r\n        const label = escapeHtml(tag);\r\n        const dataValue = escapeAttribute(tag);\r\n        const color = getTagColor(tag);\r\n        const count = info && typeof info.count === 'number' ? info.count : 0;\r\n        const isActive = currentTags.has(tag);\r\n        const isFilterActive = activeTagFilters.has(tag);\r\n        const backgroundStart = adjustColor(color, 35);\r\n        const backgroundEnd = adjustColor(color, -5);\r\n        const borderColor = adjustColor(color, -25);\r\n        const textColor = getReadableTextColor(backgroundEnd);\r\n        const filterIndicator = isFilterActive\r\n            ? '<span class=\"notes-library-tag-dot\" title=\"Фильтр по тегу активен\"></span>'\r\n            : '';\r\n\r\n        return '' +\r\n            '<button type=\"button\" class=\"notes-library-tag ' + (isActive ? 'active' : '') + '\" data-library-tag=\"' + dataValue + '\"' +\r\n            ' style=\"background: linear-gradient(135deg, ' + backgroundStart + ' 0%, ' + backgroundEnd + ' 100%); border-color: ' + borderColor + '; color: ' + textColor + ';\">' +\r\n                '<span class=\"notes-library-tag-color\" style=\"background:' + color + ';\"></span>' +\r\n                '<span class=\"notes-library-tag-label\">' + label + '</span>' +\r\n                '<span class=\"notes-library-tag-count\">' + count + '</span>' +\r\n                filterIndicator +\r\n                '<span class=\"notes-library-tag-remove\" title=\"Удалить тег из всех заметок\">×</span>' +\r\n            '</button>';\r\n    });\r\n\r\n    libraryContainer.innerHTML = items.join('');\r\n}\r\n\r\nfunction renderTagFilters() {\r\n    const filterContainer = document.getElementById('notesFilterTags');\r\n    if (!filterContainer) {\r\n        return;\r\n    }\r\n\r\n    if (notesTagLibrary.size === 0) {\r\n        filterContainer.innerHTML = '<span class=\"notes-filter-placeholder\">Сохранённых тегов пока нет</span>';\r\n        return;\r\n    }\r\n\r\n    const sortedTags = Array.from(notesTagLibrary.keys()).sort((a, b) => a.localeCompare(b, 'ru'));\r\n    if (sortedTags.length === 0) {\r\n        filterContainer.innerHTML = '<span class=\"notes-filter-placeholder\">Сохранённых тегов пока нет</span>';\r\n        return;\r\n    }\r\n\r\n    const chips = sortedTags.map((tag) => {\r\n        const isActive = activeTagFilters.has(tag);\r\n        const color = getTagColor(tag);\r\n        const base = isActive ? adjustColor(color, -5) : adjustColor(color, 30);\r\n        const border = adjustColor(color, -25);\r\n        const textColor = getReadableTextColor(base);\r\n        return '' +\r\n            '<button type=\"button\" class=\"notes-filter-chip' + (isActive ? ' active' : '') + '\" data-filter-tag=\"' + escapeAttribute(tag) + '\"' +\r\n            ' style=\"background:' + base + '; border-color:' + border + '; color:' + textColor + ';\">' +\r\n                '<span class=\"notes-filter-chip-label\">' + escapeHtml(tag) + '</span>' +\r\n                (isActive ? '<span class=\"notes-filter-chip-remove\">×</span>' : '') +\r\n            '</button>';\r\n    });\r\n\r\n    filterContainer.innerHTML = chips.join('');\r\n}\r\n\r\nfunction toggleTagFilter(tag) {\r\n    if (!tag) {\r\n        return;\r\n    }\r\n    if (activeTagFilters.has(tag)) {\r\n        activeTagFilters.delete(tag);\r\n    } else {\r\n        activeTagFilters.add(tag);\r\n    }\r\n    renderTagFilters();\r\n    renderNotesList();\r\n}\r\n\r\nfunction renderSavedColorChips() {\r\n    const savedContainer = document.getElementById('notesSavedColorsList');\r\n    if (!savedContainer) {\r\n        return;\r\n    }\r\n\r\n    const uniqueDefaults = DEFAULT_TAG_COLOR_PALETTE\r\n        .map((color) => normalizeHexColor(color))\r\n        .filter((color, index, arr) => arr.indexOf(color) === index && !notesSavedColors.includes(color));\r\n\r\n    const customChips = notesSavedColors.map((color, index) => {\r\n        const normalized = normalizeHexColor(color);\r\n        const textColor = getReadableTextColor(normalized);\r\n        return '' +\r\n            '<button type=\"button\" class=\"notes-saved-color-chip custom\" data-apply-color=\"' + normalized + '\" style=\"background:' + normalized + '; color:' + textColor + ';\">' +\r\n                '<span class=\"notes-saved-color-label\">' + normalized.toUpperCase() + '</span>' +\r\n                '<span class=\"notes-saved-color-remove\" data-remove-color=\"' + index + '\" title=\"Удалить цвет\">×</span>' +\r\n            '</button>';\r\n    });\r\n\r\n    const defaultChips = uniqueDefaults.map((color) => {\r\n        const textColor = getReadableTextColor(color);\r\n        return '' +\r\n            '<button type=\"button\" class=\"notes-saved-color-chip default\" data-apply-color=\"' + color + '\" style=\"background:' + color + '; color:' + textColor + ';\">' +\r\n                '<span class=\"notes-saved-color-label\">' + color.toUpperCase() + '</span>' +\r\n            '</button>';\r\n    });\r\n\r\n    const sections = [];\r\n\r\n    if (customChips.length > 0) {\r\n        sections.push('<div class=\"notes-saved-color-section-title\">Мои цвета</div>');\r\n        sections.push(customChips.join(''));\r\n    } else {\r\n        sections.push('<div class=\"notes-saved-color-placeholder\">Сохранённых цветов пока нет</div>');\r\n    }\r\n\r\n    if (defaultChips.length > 0) {\r\n        sections.push('<div class=\"notes-saved-color-section-title\">Быстрый выбор</div>');\r\n        sections.push(defaultChips.join(''));\r\n    }\r\n\r\n    savedContainer.innerHTML = sections.join('');\r\n}\r\n\r\nfunction bindTagManagerEvents() {\r\n    const modal = document.getElementById('notesTagManagerModal');\r\n    if (!modal || modal.dataset.bound) {\r\n        return;\r\n    }\r\n\r\n    const closeBtn = modal.querySelector('[data-notes-tag-manager-close]');\r\n    if (closeBtn) {\r\n        closeBtn.addEventListener('click', closeTagManager);\r\n    }\r\n\r\n    modal.addEventListener('click', (event) => {\r\n        if (event.target === modal) {\r\n            closeTagManager();\r\n        }\r\n    });\r\n\r\n    const addTagInput = document.getElementById('notesNewTagInput');\r\n    const addTagBtn = document.getElementById('notesNewTagAddBtn');\r\n    const addTagForm = document.getElementById('notesCreateTagForm');\r\n\r\n    const handleCreateTag = () => {\r\n        const value = (addTagInput?.value || '').trim();\r\n        if (!value) {\r\n            showNotification('Введите название тега', 'warning');\r\n            return;\r\n        }\r\n        if (createTag(value)) {\r\n            if (addTagInput) {\r\n                addTagInput.value = '';\r\n            }\r\n        }\r\n    };\r\n\r\n    if (addTagForm && !addTagForm.dataset.bound) {\r\n        addTagForm.addEventListener('submit', (event) => {\r\n            event.preventDefault();\r\n            handleCreateTag();\r\n        });\r\n        addTagForm.dataset.bound = 'true';\r\n    } else if (addTagBtn && !addTagBtn.dataset.bound) {\r\n        addTagBtn.addEventListener('click', handleCreateTag);\r\n        addTagBtn.dataset.bound = 'true';\r\n    }\r\n\r\n    if (addTagInput && !addTagInput.dataset.bound) {\r\n        addTagInput.addEventListener('keypress', (event) => {\r\n            if (event.key === 'Enter') {\r\n                event.preventDefault();\r\n                handleCreateTag();\r\n            }\r\n        });\r\n        addTagInput.dataset.bound = 'true';\r\n    }\r\n\r\n    const savedColorsList = document.getElementById('notesSavedColorsList');\r\n    if (savedColorsList && !savedColorsList.dataset.bound) {\r\n        savedColorsList.addEventListener('click', (event) => {\r\n            const removeBtn = event.target.closest('[data-remove-color]');\r\n            if (removeBtn) {\r\n                const index = parseInt(removeBtn.getAttribute('data-remove-color'), 10);\r\n                removeSavedColor(index);\r\n                return;\r\n            }\r\n\r\n            const applyBtn = event.target.closest('[data-apply-color]');\r\n            if (applyBtn) {\r\n                const color = applyBtn.getAttribute('data-apply-color');\r\n                if (notesTagManagerState.selectedTag) {\r\n                    setTagColor(notesTagManagerState.selectedTag, color);\r\n                    renderTagManager();\r\n                } else {\r\n                    addSavedColor(color);\r\n                }\r\n            }\r\n        });\r\n        savedColorsList.dataset.bound = 'true';\r\n    }\r\n\r\n    const addColorBtn = document.getElementById('notesSaveColorBtn');\r\n    const addColorInput = document.getElementById('notesSaveColorInput');\r\n    if (addColorBtn && !addColorBtn.dataset.bound) {\r\n        addColorBtn.addEventListener('click', () => {\r\n            const value = (addColorInput?.value || '').trim();\r\n            if (!value) {\r\n                showNotification('Выберите цвет для сохранения', 'warning');\r\n                return;\r\n            }\r\n            addSavedColor(value);\r\n        });\r\n        addColorBtn.dataset.bound = 'true';\r\n    }\r\n\r\n    const clearColorsBtn = document.getElementById('notesClearSavedColorsBtn');\r\n    if (clearColorsBtn && !clearColorsBtn.dataset.bound) {\r\n        clearColorsBtn.addEventListener('click', () => {\r\n            if (notesSavedColors.length === 0) {\r\n                showNotification('Сохранённых цветов нет', 'info');\r\n                return;\r\n            }\r\n            if (confirm('Очистить список сохранённых цветов?')) {\r\n                clearSavedColors();\r\n            }\r\n        });\r\n        clearColorsBtn.dataset.bound = 'true';\r\n    }\r\n\r\n    const managerList = document.getElementById('notesTagManagerList');\r\n    if (managerList && !managerList.dataset.bound) {\r\n        managerList.addEventListener('click', (event) => {\r\n            const removeBtn = event.target.closest('[data-tag-remove]');\r\n            if (removeBtn) {\r\n                const tag = removeBtn.getAttribute('data-tag-remove');\r\n                removeTagFromLibrary(tag);\r\n                renderTagManager();\r\n                return;\r\n            }\r\n\r\n            const row = event.target.closest('.notes-tag-manager-row');\r\n            if (row) {\r\n                const tag = row.getAttribute('data-manager-tag');\r\n                if (tag) {\r\n                    notesTagManagerState.selectedTag = tag;\r\n                    renderTagManager();\r\n                }\r\n            }\r\n        });\r\n\r\n        managerList.addEventListener('input', (event) => {\r\n            const colorInput = event.target.closest('[data-tag-color-input]');\r\n            if (colorInput) {\r\n                const tag = colorInput.getAttribute('data-tag-color-input');\r\n                notesTagManagerState.selectedTag = tag;\r\n                setTagColor(tag, colorInput.value);\r\n            }\r\n        });\r\n\r\n        managerList.dataset.bound = 'true';\r\n    }\r\n\r\n    modal.dataset.bound = 'true';\r\n}\r\n\r\nfunction openTagManager(initialTag = null) {\r\n    const modal = document.getElementById('notesTagManagerModal');\r\n    if (!modal) {\r\n        return;\r\n    }\r\n    notesTagManagerState.isOpen = true;\r\n    if (initialTag) {\r\n        notesTagManagerState.selectedTag = initialTag;\r\n    }\r\n    modal.classList.add('active');\r\n    document.documentElement.classList.add('notes-modal-open');\r\n    renderTagManager();\r\n}\r\n\r\nfunction closeTagManager() {\r\n    const modal = document.getElementById('notesTagManagerModal');\r\n    if (!modal) {\r\n        return;\r\n    }\r\n    notesTagManagerState.isOpen = false;\r\n    modal.classList.remove('active');\r\n    document.documentElement.classList.remove('notes-modal-open');\r\n}\r\n\r\nfunction renderTagManager() {\r\n    const list = document.getElementById('notesTagManagerList');\r\n    if (!list) {\r\n        return;\r\n    }\r\n\r\n    renderSavedColorChips();\r\n\r\n    const entries = Array.from(notesTagLibrary.entries()).sort((a, b) => a[0].localeCompare(b[0], 'ru'));\r\n\r\n    if (entries.length === 0) {\r\n        notesTagManagerState.selectedTag = null;\r\n        list.innerHTML = '<div class=\"notes-tag-manager-empty\">Сохранённых тегов пока нет. Создайте новый тег.</div>';\r\n        return;\r\n    }\r\n\r\n    if (!notesTagManagerState.selectedTag || !entries.find(([tag]) => tag === notesTagManagerState.selectedTag)) {\r\n        notesTagManagerState.selectedTag = entries[0][0];\r\n    }\r\n\r\n    const rows = entries.map(([tag, info]) => {\r\n        const color = getTagColor(tag);\r\n        const textColor = getReadableTextColor(color);\r\n        const count = info && typeof info.count === 'number' ? info.count : 0;\r\n        const isSelected = notesTagManagerState.selectedTag === tag;\r\n\r\n        return '' +\r\n            '<div class=\"notes-tag-manager-row' + (isSelected ? ' selected' : '') + '\" data-manager-tag=\"' + escapeAttribute(tag) + '\">' +\r\n                '<div class=\"notes-tag-manager-row-main\">' +\r\n                    '<span class=\"notes-tag-manager-chip\" style=\"background:' + color + '; color:' + textColor + ';\">' + escapeHtml(tag) + '</span>' +\r\n                    '<span class=\"notes-tag-manager-count\" title=\"Заметок с этим тегом\">' + count + '</span>' +\r\n                '</div>' +\r\n                '<div class=\"notes-tag-manager-row-actions\">' +\r\n                    '<label class=\"notes-tag-manager-color-picker\" title=\"Выбрать цвет для тега\">' +\r\n                        '<input type=\"color\" value=\"' + color + '\" data-tag-color-input=\"' + escapeAttribute(tag) + '\">' +\r\n                        '<span>Цвет</span>' +\r\n                    '</label>' +\r\n                    '<button type=\"button\" class=\"notes-tag-manager-remove\" data-tag-remove=\"' + escapeAttribute(tag) + '\">Удалить</button>' +\r\n                '</div>' +\r\n            '</div>';\r\n    });\r\n\r\n    list.innerHTML = rows.join('');\r\n}\r\n\r\nfunction createTag(tagName) {\r\n    const trimmed = (tagName || '').trim();\r\n    if (!trimmed) {\r\n        return false;\r\n    }\r\n\r\n    if (notesTagLibrary.has(trimmed)) {\r\n        showNotification('Такой тег уже существует', 'info');\r\n        notesTagManagerState.selectedTag = trimmed;\r\n        renderTagManager();\r\n        return false;\r\n    }\r\n\r\n    const color = getTagColor(trimmed);\r\n    notesTagColors[trimmed] = color;\r\n    notesTagLibrary.set(trimmed, { count: 0, color });\r\n    activeTagFilters.delete(trimmed);\r\n\r\n    showNotification('Тег \"' + trimmed + '\" создан', 'success');\r\n    notesTagManagerState.selectedTag = trimmed;\r\n    renderAvailableTags();\r\n    renderTagFilters();\r\n    renderTagManager();\r\n    scheduleNotesSave({ reason: 'create-tag' });\r\n    return true;\r\n}\r\n\r\nfunction toggleTagFromLibrary(tag) {\r\n    if (!currentNoteId) {\r\n        showNotification('Сначала выберите заметку, чтобы добавить тег', 'warning');\r\n        return;\r\n    }\r\n\r\n    const note = notesData.find(n => n.id === currentNoteId);\r\n    if (!note) {\r\n        return;\r\n    }\r\n\r\n    if (note.tags.includes(tag)) {\r\n        note.tags = note.tags.filter(t => t !== tag);\r\n        showNotification('Тег \"' + tag + '\" удалён из заметки', 'info');\r\n    } else {\r\n        note.tags.push(tag);\r\n        showNotification('Тег \"' + tag + '\" добавлен к заметке', 'success');\r\n    }\r\n\r\n    renderTags(note.tags);\r\n    rebuildTagLibrary();\r\n    notesTagManagerState.selectedTag = tag;\r\n    renderTagManager();\r\n}\r\n\r\nfunction removeTagFromLibrary(tag) {\r\n    if (!confirm('Удалить тег \"' + tag + '\" из всех заметок?')) {\r\n        return;\r\n    }\r\n\r\n    let affected = false;\r\n\r\n    notesData.forEach(note => {\r\n        if (note.tags.includes(tag)) {\r\n            note.tags = note.tags.filter(t => t !== tag);\r\n            if (note.id === currentNoteId) {\r\n                renderTags(note.tags);\r\n            }\r\n            affected = true;\r\n        }\r\n    });\r\n\r\n    const hadMetadata = Boolean(notesTagColors[tag]);\r\n    delete notesTagColors[tag];\r\n    activeTagFilters.delete(tag);\r\n\r\n    rebuildTagLibrary();\r\n    renderNotesList();\r\n    highlightNote(currentNoteId);\r\n    renderTagManager();\r\n    renderTagFilters();\r\n\r\n    if (affected || hadMetadata) {\r\n        showNotification('Тег удалён. Не забудьте сохранить изменения', 'warning');\r\n        scheduleNotesSave({ reason: 'remove-tag' });\r\n    }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log('\uD83C\uDFAF DOM загружен, проверяем вкладку Note...');\r\n\r\n    // Проверяем, активна ли вкладка Note\r\n    const noteTab = document.querySelector('[data-tab=\"note\"]');\r\n    if (noteTab && noteTab.classList.contains('active')) {\r\n        console.log('✅ Вкладка Note активна, инициализируем систему');\r\n        initNotesSystem();\r\n    }\r\n});\r\n\r\n// Инициализация при переключении на вкладку Note\r\ndocument.addEventListener('click', (e) => {\r\n    const tab = e.target.closest('[data-tab=\"note\"]');\r\n    if (tab) {\r\n        console.log('\uD83D\uDD04 Переключение на вкладку Note');\r\n        setTimeout(() => {\r\n            if (!isNotesLoaded) {\r\n                initNotesSystem();\r\n            }\r\n        }, 100);\r\n    }\r\n});\r\n\r\n// Добавляем стили для анимаций уведомлений\r\nconst style = document.createElement('style');\r\nstyle.textContent = `\r\n    @keyframes slideIn {\r\n        from {\r\n            opacity: 0;\r\n            transform: translateX(100px);\r\n        }\r\n        to {\r\n            opacity: 1;\r\n            transform: translateX(0);\r\n        }\r\n    }\r\n\r\n    @keyframes slideOut {\r\n        from {\r\n            opacity: 1;\r\n            transform: translateX(0);\r\n        }\r\n        to {\r\n            opacity: 0;\r\n            transform: translateX(100px);\r\n        }\r\n    }\r\n`;\r\ndocument.head.appendChild(style);\r\n\r\nconsole.log('✅ notes-system.js загружен');\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Local/tools/passgnld/notes-system.js b/Local/tools/passgnld/notes-system.js
--- a/Local/tools/passgnld/notes-system.js	(revision 0d9cd845c4b4e33d9a4f5bc6a53152bee3ea9cfa)
+++ b/Local/tools/passgnld/notes-system.js	(date 1761647466000)
@@ -1056,11 +1056,11 @@
         return '' +
             '<button type="button" class="notes-library-tag ' + (isActive ? 'active' : '') + '" data-library-tag="' + dataValue + '"' +
             ' style="background: linear-gradient(135deg, ' + backgroundStart + ' 0%, ' + backgroundEnd + ' 100%); border-color: ' + borderColor + '; color: ' + textColor + ';">' +
-                '<span class="notes-library-tag-color" style="background:' + color + ';"></span>' +
-                '<span class="notes-library-tag-label">' + label + '</span>' +
-                '<span class="notes-library-tag-count">' + count + '</span>' +
-                filterIndicator +
-                '<span class="notes-library-tag-remove" title="Удалить тег из всех заметок">×</span>' +
+            '<span class="notes-library-tag-color" style="background:' + color + ';"></span>' +
+            '<span class="notes-library-tag-label">' + label + '</span>' +
+            '<span class="notes-library-tag-count">' + count + '</span>' +
+            filterIndicator +
+            '<span class="notes-library-tag-remove" title="Удалить тег из всех заметок">×</span>' +
             '</button>';
     });
 
@@ -1093,8 +1093,8 @@
         return '' +
             '<button type="button" class="notes-filter-chip' + (isActive ? ' active' : '') + '" data-filter-tag="' + escapeAttribute(tag) + '"' +
             ' style="background:' + base + '; border-color:' + border + '; color:' + textColor + ';">' +
-                '<span class="notes-filter-chip-label">' + escapeHtml(tag) + '</span>' +
-                (isActive ? '<span class="notes-filter-chip-remove">×</span>' : '') +
+            '<span class="notes-filter-chip-label">' + escapeHtml(tag) + '</span>' +
+            (isActive ? '<span class="notes-filter-chip-remove">×</span>' : '') +
             '</button>';
     });
 
@@ -1129,8 +1129,8 @@
         const textColor = getReadableTextColor(normalized);
         return '' +
             '<button type="button" class="notes-saved-color-chip custom" data-apply-color="' + normalized + '" style="background:' + normalized + '; color:' + textColor + ';">' +
-                '<span class="notes-saved-color-label">' + normalized.toUpperCase() + '</span>' +
-                '<span class="notes-saved-color-remove" data-remove-color="' + index + '" title="Удалить цвет">×</span>' +
+            '<span class="notes-saved-color-label">' + normalized.toUpperCase() + '</span>' +
+            '<span class="notes-saved-color-remove" data-remove-color="' + index + '" title="Удалить цвет">×</span>' +
             '</button>';
     });
 
@@ -1138,7 +1138,7 @@
         const textColor = getReadableTextColor(color);
         return '' +
             '<button type="button" class="notes-saved-color-chip default" data-apply-color="' + color + '" style="background:' + color + '; color:' + textColor + ';">' +
-                '<span class="notes-saved-color-label">' + color.toUpperCase() + '</span>' +
+            '<span class="notes-saved-color-label">' + color.toUpperCase() + '</span>' +
             '</button>';
     });
 
@@ -1354,17 +1354,17 @@
 
         return '' +
             '<div class="notes-tag-manager-row' + (isSelected ? ' selected' : '') + '" data-manager-tag="' + escapeAttribute(tag) + '">' +
-                '<div class="notes-tag-manager-row-main">' +
-                    '<span class="notes-tag-manager-chip" style="background:' + color + '; color:' + textColor + ';">' + escapeHtml(tag) + '</span>' +
-                    '<span class="notes-tag-manager-count" title="Заметок с этим тегом">' + count + '</span>' +
-                '</div>' +
-                '<div class="notes-tag-manager-row-actions">' +
-                    '<label class="notes-tag-manager-color-picker" title="Выбрать цвет для тега">' +
-                        '<input type="color" value="' + color + '" data-tag-color-input="' + escapeAttribute(tag) + '">' +
-                        '<span>Цвет</span>' +
-                    '</label>' +
-                    '<button type="button" class="notes-tag-manager-remove" data-tag-remove="' + escapeAttribute(tag) + '">Удалить</button>' +
-                '</div>' +
+            '<div class="notes-tag-manager-row-main">' +
+            '<span class="notes-tag-manager-chip" style="background:' + color + '; color:' + textColor + ';">' + escapeHtml(tag) + '</span>' +
+            '<span class="notes-tag-manager-count" title="Заметок с этим тегом">' + count + '</span>' +
+            '</div>' +
+            '<div class="notes-tag-manager-row-actions">' +
+            '<label class="notes-tag-manager-color-picker" title="Выбрать цвет для тега">' +
+            '<input type="color" value="' + color + '" data-tag-color-input="' + escapeAttribute(tag) + '">' +
+            '<span>Цвет</span>' +
+            '</label>' +
+            '<button type="button" class="notes-tag-manager-remove" data-tag-remove="' + escapeAttribute(tag) + '">Удалить</button>' +
+            '</div>' +
             '</div>';
     });
 
